// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    instanceName: string;
    region: string;
    availabilityZone?: string;
    blueprintId: string;
    bundleId: string;
    userData?: string;
    tags?: { key: string; value: string }[];
    openPorts?: {
        protocol: "all" | "tcp" | "udp" | "icmp";
        fromPort: number;
        toPort: number;
        cidrs: string[];
        ipv6Cidrs: string[];
        cidrListAliases: string[];
    }[];
}

export interface OutputOk {
    aws_lightsail_instance: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        region: string;
        availability_zone: string;
        instance_name: string;
        blueprint_id: string;
        bundle_id: string;
        ssh_username: string;
        address_ipv4: string;
        address_ipv6: string;
    };
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "instanceName") return;
            if (field === "region") return;
            if (field === "availabilityZone") return;
            if (field === "blueprintId") return;
            if (field === "bundleId") return;
            if (field === "userData") return;
            if (field === "tags") return;
            if (field === "openPorts") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        log.println("v.instanceName must be string");
        if (typeof v.instanceName !== "string") {
            throw new Error("v.instanceName is not string");
        }

        log.println("v.region must be string");
        if (typeof v.region !== "string") {
            throw new Error("v.region is not string");
        }

        if (v.availabilityZone !== undefined) {
            log.println("v.availabilityZone must be string");
            if (typeof v.availabilityZone !== "string") {
                throw new Error("v.availabilityZone is not string");
            }
        }

        log.println("v.blueprintId must be string");
        if (typeof v.blueprintId !== "string") {
            throw new Error("v.blueprintId is not string");
        }

        log.println("v.bundleId must be string");
        if (typeof v.bundleId !== "string") {
            throw new Error("v.bundleId is not string");
        }

        if (v.userData !== undefined) {
            log.println("v.userData must be string");
            if (typeof v.userData !== "string") {
                throw new Error("v.userData is not string");
            }
        }

        if (v.tags !== undefined) {
            log.println("v.tags must be array");
            if (!Array.isArray(v.tags)) {
                throw new Error("v.tags is not array");
            }

            v.tags.forEach((item: any, i: number) => {
                log.println("check v.tags[i]");

                log.println("item must be object");
                if (typeof item !== "object" || item === null) {
                    throw new Error("item is not object");
                }

                Object.keys(item).forEach((field) => {
                    if (field === "key") return;
                    if (field === "value") return;
                    throw new Error("item contains unknown field: " + field);
                });

                log.println("item.key must be string");
                if (typeof item.key !== "string") {
                    throw new Error("item.key is not string");
                }

                log.println("item.value must be string");
                if (typeof item.value !== "string") {
                    throw new Error("item.value is not string");
                }
            });
        }

        if (v.openPorts !== undefined) {
            log.println("v.openPorts must be array");
            if (!Array.isArray(v.openPorts)) {
                throw new Error("v.openPorts is not array");
            }

            v.openPorts.forEach((item: any, i: number) => {
                log.println("check v.openPorts[i]");

                log.println("item must be object");
                if (typeof item !== "object" || item === null) {
                    throw new Error("item is not object");
                }

                Object.keys(item).forEach((field) => {
                    if (field === "protocol") return;
                    if (field === "fromPort") return;
                    if (field === "toPort") return;
                    if (field === "cidrs") return;
                    if (field === "ipv6Cidrs") return;
                    if (field === "cidrListAliases") return;
                    throw new Error("item contains unknown field: " + field);
                });

                log.println("item.protocol must be string");
                if (typeof item.protocol !== "string") {
                    throw new Error("item.protocol is not string");
                }

                if (new Set(["all", "tcp", "udp", "icmp"]).has(item.protocol) === false) {
                    throw new Error("item.protocol is not a valid string enum value");
                }

                log.println("item.fromPort must be number");
                if (typeof item.fromPort !== "number") {
                    throw new Error("item.fromPort is not number");
                }

                if (Number.isFinite(item.fromPort) === false) {
                    throw new Error("item.fromPort is not finite number");
                }

                log.println("item.toPort must be number");
                if (typeof item.toPort !== "number") {
                    throw new Error("item.toPort is not number");
                }

                if (Number.isFinite(item.toPort) === false) {
                    throw new Error("item.toPort is not finite number");
                }

                log.println("item.cidrs must be array");
                if (!Array.isArray(item.cidrs)) {
                    throw new Error("item.cidrs is not array");
                }

                item.cidrs.forEach((item: any, i: number) => {
                    log.println("check item.cidrs[i]");

                    log.println("item must be string");
                    if (typeof item !== "string") {
                        throw new Error("item is not string");
                    }
                });

                log.println("item.ipv6Cidrs must be array");
                if (!Array.isArray(item.ipv6Cidrs)) {
                    throw new Error("item.ipv6Cidrs is not array");
                }

                item.ipv6Cidrs.forEach((item: any, i: number) => {
                    log.println("check item.ipv6Cidrs[i]");

                    log.println("item must be string");
                    if (typeof item !== "string") {
                        throw new Error("item is not string");
                    }
                });

                log.println("item.cidrListAliases must be array");
                if (!Array.isArray(item.cidrListAliases)) {
                    throw new Error("item.cidrListAliases is not array");
                }

                item.cidrListAliases.forEach((item: any, i: number) => {
                    log.println("check item.cidrListAliases[i]");

                    log.println("item must be string");
                    if (typeof item !== "string") {
                        throw new Error("item is not string");
                    }
                });
            });
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            aws_lightsail_instance: copy_aws_lightsail_instance(v.aws_lightsail_instance)
        };
        return obj;
    } else {
        return {
            aws_lightsail_instance: {
                id: "",
                create_time: "",
                update_time: "",
                region: "",
                availability_zone: "",
                instance_name: "",
                blueprint_id: "",
                bundle_id: "",
                ssh_username: "",
                address_ipv4: "",
                address_ipv6: ""
            }
        };
    }

    function copy_aws_lightsail_instance(v: any): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        region: string;
        availability_zone: string;
        instance_name: string;
        blueprint_id: string;
        bundle_id: string;
        ssh_username: string;
        address_ipv4: string;
        address_ipv6: string;
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                id: copy_id(v.id),
                fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                create_time: copy_create_time(v.create_time),
                update_time: copy_update_time(v.update_time),
                region: copy_region(v.region),
                availability_zone: copy_availability_zone(v.availability_zone),
                instance_name: copy_instance_name(v.instance_name),
                blueprint_id: copy_blueprint_id(v.blueprint_id),
                bundle_id: copy_bundle_id(v.bundle_id),
                ssh_username: copy_ssh_username(v.ssh_username),
                address_ipv4: copy_address_ipv4(v.address_ipv4),
                address_ipv6: copy_address_ipv6(v.address_ipv6)
            };
            return obj;
        } else {
            return {
                id: "",
                create_time: "",
                update_time: "",
                region: "",
                availability_zone: "",
                instance_name: "",
                blueprint_id: "",
                bundle_id: "",
                ssh_username: "",
                address_ipv4: "",
                address_ipv6: ""
            };
        }

        function copy_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_fake(v: any): boolean {
            return typeof v === "boolean" ? v : false;
        }

        function copy_create_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_update_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_region(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_availability_zone(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_instance_name(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_blueprint_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_bundle_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_ssh_username(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_address_ipv4(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_address_ipv6(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
