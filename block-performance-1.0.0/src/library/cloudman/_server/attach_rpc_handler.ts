// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_app_build } from "../app-build/rpc/handle.js";
import { handle_rpc_app_build_and_deploy } from "../app-build-and-deploy/rpc/handle.js";
import { handle_rpc_app_deploy } from "../app-deploy/rpc/handle.js";
import { handle_rpc_rsync_pull } from "../rsync-pull/rpc/handle.js";
import { handle_rpc_rsync_push } from "../rsync-push/rpc/handle.js";
import { handle_rpc_scp_download } from "../scp-download/rpc/handle.js";
import { handle_rpc_scp_update_text } from "../scp-update-text/rpc/handle.js";
import { handle_rpc_scp_upload } from "../scp-upload/rpc/handle.js";
import { handle_rpc_ssh_apt_install } from "../ssh-apt-install/rpc/handle.js";
import { handle_rpc_ssh_apt_remove } from "../ssh-apt-remove/rpc/handle.js";
import { handle_rpc_ssh_exec } from "../ssh-exec/rpc/handle.js";
import { handle_rpc_ssh_exec_script } from "../ssh-exec-script/rpc/handle.js";
import { handle_rpc_ssh_exec_script_file } from "../ssh-exec-script-file/rpc/handle.js";
import { handle_rpc_ssh_install_build_essential } from "../ssh-install-build-essential/rpc/handle.js";
import { handle_rpc_ssh_install_certbot } from "../ssh-install-certbot/rpc/handle.js";
import { handle_rpc_ssh_install_chromium_deps } from "../ssh-install-chromium-deps/rpc/handle.js";
import { handle_rpc_ssh_install_docker } from "../ssh-install-docker/rpc/handle.js";
import { handle_rpc_ssh_install_gnome } from "../ssh-install-gnome/rpc/handle.js";
import { handle_rpc_ssh_install_jmeter } from "../ssh-install-jmeter/rpc/handle.js";
import { handle_rpc_ssh_install_nodejs } from "../ssh-install-nodejs/rpc/handle.js";
import { handle_rpc_ssh_install_openjdk } from "../ssh-install-openjdk/rpc/handle.js";
import { handle_rpc_ssh_install_python } from "../ssh-install-python/rpc/handle.js";
import { handle_rpc_ssh_install_rsync } from "../ssh-install-rsync/rpc/handle.js";
import { handle_rpc_ssh_install_snapd } from "../ssh-install-snapd/rpc/handle.js";
import { handle_rpc_ssh_install_wget } from "../ssh-install-wget/rpc/handle.js";
import { handle_rpc_ssh_install_wireguard } from "../ssh-install-wireguard/rpc/handle.js";
import { handle_rpc_ssh_key_file_get } from "../ssh-key-file-get/rpc/handle.js";
import { handle_rpc_ssh_reboot } from "../ssh-reboot/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { router: express.Router }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { router } = opt;

    router.post("/library/cloudman/app-build", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.app-build");
        handle_rpc_app_build(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/app-build-and-deploy", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.app-build-and-deploy");
        handle_rpc_app_build_and_deploy(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/app-deploy", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.app-deploy");
        handle_rpc_app_deploy(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/rsync-pull", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.rsync-pull");
        handle_rpc_rsync_pull(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/rsync-push", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.rsync-push");
        handle_rpc_rsync_push(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/scp-download", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.scp-download");
        handle_rpc_scp_download(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/scp-update-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.scp-update-text");
        handle_rpc_scp_update_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/scp-upload", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.scp-upload");
        handle_rpc_scp_upload(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-apt-install", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-apt-install");
        handle_rpc_ssh_apt_install(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-apt-remove", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-apt-remove");
        handle_rpc_ssh_apt_remove(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-exec", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-exec");
        handle_rpc_ssh_exec(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-exec-script", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-exec-script");
        handle_rpc_ssh_exec_script(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-exec-script-file", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-exec-script-file");
        handle_rpc_ssh_exec_script_file(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-build-essential", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-build-essential");
        handle_rpc_ssh_install_build_essential(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-certbot", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-certbot");
        handle_rpc_ssh_install_certbot(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-chromium-deps", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-chromium-deps");
        handle_rpc_ssh_install_chromium_deps(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-docker", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-docker");
        handle_rpc_ssh_install_docker(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-gnome", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-gnome");
        handle_rpc_ssh_install_gnome(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-jmeter", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-jmeter");
        handle_rpc_ssh_install_jmeter(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-nodejs", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-nodejs");
        handle_rpc_ssh_install_nodejs(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-openjdk", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-openjdk");
        handle_rpc_ssh_install_openjdk(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-python", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-python");
        handle_rpc_ssh_install_python(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-rsync", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-rsync");
        handle_rpc_ssh_install_rsync(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-snapd", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-snapd");
        handle_rpc_ssh_install_snapd(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-wget", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-wget");
        handle_rpc_ssh_install_wget(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-install-wireguard", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-install-wireguard");
        handle_rpc_ssh_install_wireguard(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-key-file-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-key-file-get");
        handle_rpc_ssh_key_file_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/cloudman/ssh-reboot", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cloudman.ssh-reboot");
        handle_rpc_ssh_reboot(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
