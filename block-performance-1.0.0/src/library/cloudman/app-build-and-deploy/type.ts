// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    app: {
        name: string;
        version: string;
        library_list: string[];
        npm_script: { dev: string; start: string; stop: string };
        customize_file_list: { name: string; json_data?: { [key: string]: any } }[];
    };
    remote: { username: string; address: string; ssh_auth_key: { os?: boolean; store?: boolean; file?: string } };
    pre_installed_applications?: { docker?: {}; python?: {}; build_essential?: {}; chromium_deps?: {} };
}

export interface OutputOk {}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "app") return;
            if (field === "remote") return;
            if (field === "pre_installed_applications") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.app must be object");
        if (typeof v.app !== "object" || v.app === null) {
            throw new Error("v.app is not object");
        }

        Object.keys(v.app).forEach((field) => {
            if (field === "name") return;
            if (field === "version") return;
            if (field === "library_list") return;
            if (field === "npm_script") return;
            if (field === "customize_file_list") return;
            throw new Error("v.app contains unknown field: " + field);
        });

        log.println("v.app.name must be string");
        if (typeof v.app.name !== "string") {
            throw new Error("v.app.name is not string");
        }

        log.println("v.app.version must be string");
        if (typeof v.app.version !== "string") {
            throw new Error("v.app.version is not string");
        }

        log.println("v.app.library_list must be array");
        if (!Array.isArray(v.app.library_list)) {
            throw new Error("v.app.library_list is not array");
        }

        v.app.library_list.forEach((item: any, i: number) => {
            log.println("check v.app.library_list[i]");

            log.println("item must be string");
            if (typeof item !== "string") {
                throw new Error("item is not string");
            }
        });

        log.println("v.app.npm_script must be object");
        if (typeof v.app.npm_script !== "object" || v.app.npm_script === null) {
            throw new Error("v.app.npm_script is not object");
        }

        Object.keys(v.app.npm_script).forEach((field) => {
            if (field === "dev") return;
            if (field === "start") return;
            if (field === "stop") return;
            throw new Error("v.app.npm_script contains unknown field: " + field);
        });

        log.println("v.app.npm_script.dev must be string");
        if (typeof v.app.npm_script.dev !== "string") {
            throw new Error("v.app.npm_script.dev is not string");
        }

        log.println("v.app.npm_script.start must be string");
        if (typeof v.app.npm_script.start !== "string") {
            throw new Error("v.app.npm_script.start is not string");
        }

        log.println("v.app.npm_script.stop must be string");
        if (typeof v.app.npm_script.stop !== "string") {
            throw new Error("v.app.npm_script.stop is not string");
        }

        log.println("v.app.customize_file_list must be array");
        if (!Array.isArray(v.app.customize_file_list)) {
            throw new Error("v.app.customize_file_list is not array");
        }

        v.app.customize_file_list.forEach((item: any, i: number) => {
            log.println("check v.app.customize_file_list[i]");

            log.println("item must be object");
            if (typeof item !== "object" || item === null) {
                throw new Error("item is not object");
            }

            Object.keys(item).forEach((field) => {
                if (field === "name") return;
                if (field === "json_data") return;
                throw new Error("item contains unknown field: " + field);
            });

            log.println("item.name must be string");
            if (typeof item.name !== "string") {
                throw new Error("item.name is not string");
            }

            if (item.json_data !== undefined) {
                log.println("item.json_data must be object");
                if (typeof item.json_data !== "object" || item.json_data === null) {
                    throw new Error("item.json_data is not object");
                }

                Object.keys(item.json_data).forEach((field) => {
                    // a dynamic field, check it (FIXME log message is not clear)

                    log.println("item.json_data[field] must be any (ignore)");
                });
            }
        });

        log.println("v.remote must be object");
        if (typeof v.remote !== "object" || v.remote === null) {
            throw new Error("v.remote is not object");
        }

        Object.keys(v.remote).forEach((field) => {
            if (field === "username") return;
            if (field === "address") return;
            if (field === "ssh_auth_key") return;
            throw new Error("v.remote contains unknown field: " + field);
        });

        log.println("v.remote.username must be string");
        if (typeof v.remote.username !== "string") {
            throw new Error("v.remote.username is not string");
        }

        log.println("v.remote.address must be string");
        if (typeof v.remote.address !== "string") {
            throw new Error("v.remote.address is not string");
        }

        log.println("v.remote.ssh_auth_key must be object");
        if (typeof v.remote.ssh_auth_key !== "object" || v.remote.ssh_auth_key === null) {
            throw new Error("v.remote.ssh_auth_key is not object");
        }

        Object.keys(v.remote.ssh_auth_key).forEach((field) => {
            if (field === "os") return;
            if (field === "store") return;
            if (field === "file") return;
            throw new Error("v.remote.ssh_auth_key contains unknown field: " + field);
        });

        if (v.remote.ssh_auth_key.os !== undefined) {
            log.println("v.remote.ssh_auth_key.os must be boolean");
            if (typeof v.remote.ssh_auth_key.os !== "boolean") {
                throw new Error("v.remote.ssh_auth_key.os is not boolean");
            }
        }

        if (v.remote.ssh_auth_key.store !== undefined) {
            log.println("v.remote.ssh_auth_key.store must be boolean");
            if (typeof v.remote.ssh_auth_key.store !== "boolean") {
                throw new Error("v.remote.ssh_auth_key.store is not boolean");
            }
        }

        if (v.remote.ssh_auth_key.file !== undefined) {
            log.println("v.remote.ssh_auth_key.file must be string");
            if (typeof v.remote.ssh_auth_key.file !== "string") {
                throw new Error("v.remote.ssh_auth_key.file is not string");
            }
        }

        if (v.pre_installed_applications !== undefined) {
            log.println("v.pre_installed_applications must be object");
            if (typeof v.pre_installed_applications !== "object" || v.pre_installed_applications === null) {
                throw new Error("v.pre_installed_applications is not object");
            }

            Object.keys(v.pre_installed_applications).forEach((field) => {
                if (field === "docker") return;
                if (field === "python") return;
                if (field === "build_essential") return;
                if (field === "chromium_deps") return;
                throw new Error("v.pre_installed_applications contains unknown field: " + field);
            });

            if (v.pre_installed_applications.docker !== undefined) {
                log.println("v.pre_installed_applications.docker must be object");
                if (typeof v.pre_installed_applications.docker !== "object" || v.pre_installed_applications.docker === null) {
                    throw new Error("v.pre_installed_applications.docker is not object");
                }

                Object.keys(v.pre_installed_applications.docker).forEach((field) => {
                    throw new Error("v.pre_installed_applications.docker contains unknown field: " + field);
                });
            }

            if (v.pre_installed_applications.python !== undefined) {
                log.println("v.pre_installed_applications.python must be object");
                if (typeof v.pre_installed_applications.python !== "object" || v.pre_installed_applications.python === null) {
                    throw new Error("v.pre_installed_applications.python is not object");
                }

                Object.keys(v.pre_installed_applications.python).forEach((field) => {
                    throw new Error("v.pre_installed_applications.python contains unknown field: " + field);
                });
            }

            if (v.pre_installed_applications.build_essential !== undefined) {
                log.println("v.pre_installed_applications.build_essential must be object");
                if (typeof v.pre_installed_applications.build_essential !== "object" || v.pre_installed_applications.build_essential === null) {
                    throw new Error("v.pre_installed_applications.build_essential is not object");
                }

                Object.keys(v.pre_installed_applications.build_essential).forEach((field) => {
                    throw new Error("v.pre_installed_applications.build_essential contains unknown field: " + field);
                });
            }

            if (v.pre_installed_applications.chromium_deps !== undefined) {
                log.println("v.pre_installed_applications.chromium_deps must be object");
                if (typeof v.pre_installed_applications.chromium_deps !== "object" || v.pre_installed_applications.chromium_deps === null) {
                    throw new Error("v.pre_installed_applications.chromium_deps is not object");
                }

                Object.keys(v.pre_installed_applications.chromium_deps).forEach((field) => {
                    throw new Error("v.pre_installed_applications.chromium_deps contains unknown field: " + field);
                });
            }
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {};
        return obj;
    } else {
        return {};
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
