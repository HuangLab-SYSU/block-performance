// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_master_server_ls_raw } from "../master-server-ls-raw/rpc/handle.js";
import { handle_rpc_master_server_add_raw } from "../master-server-add-raw/rpc/handle.js";
import { handle_rpc_master_server_get_raw } from "../master-server-get-raw/rpc/handle.js";
import { handle_rpc_master_server_set_raw } from "../master-server-set-raw/rpc/handle.js";
import { handle_rpc_master_server_ls } from "../master-server-ls/rpc/handle.js";
import { handle_rpc_master_server_add } from "../master-server-add/rpc/handle.js";
import { handle_rpc_master_server_del } from "../master-server-del/rpc/handle.js";
import { handle_rpc_master_server_get } from "../master-server-get/rpc/handle.js";
import { handle_rpc_master_server_set } from "../master-server-set/rpc/handle.js";
import { handle_rpc_master_server_upgrade } from "../master-server-upgrade/rpc/handle.js";
import { handle_rpc_slave_server_ls_raw } from "../slave-server-ls-raw/rpc/handle.js";
import { handle_rpc_slave_server_add_raw } from "../slave-server-add-raw/rpc/handle.js";
import { handle_rpc_slave_server_get_raw } from "../slave-server-get-raw/rpc/handle.js";
import { handle_rpc_slave_server_set_raw } from "../slave-server-set-raw/rpc/handle.js";
import { handle_rpc_slave_server_ls } from "../slave-server-ls/rpc/handle.js";
import { handle_rpc_slave_server_add } from "../slave-server-add/rpc/handle.js";
import { handle_rpc_slave_server_del } from "../slave-server-del/rpc/handle.js";
import { handle_rpc_slave_server_get } from "../slave-server-get/rpc/handle.js";
import { handle_rpc_slave_server_set } from "../slave-server-set/rpc/handle.js";
import { handle_rpc_slave_server_upgrade } from "../slave-server-upgrade/rpc/handle.js";
import { handle_rpc_upgrade } from "../upgrade/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { router: express.Router }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { router } = opt;

    router.post("/library/x-jmeter-cloud-store/master-server-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-ls-raw");
        handle_rpc_master_server_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-add-raw");
        handle_rpc_master_server_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-get-raw");
        handle_rpc_master_server_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-set-raw");
        handle_rpc_master_server_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-ls");
        handle_rpc_master_server_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-add");
        handle_rpc_master_server_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-del");
        handle_rpc_master_server_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-get");
        handle_rpc_master_server_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-set");
        handle_rpc_master_server_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/master-server-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.master-server-upgrade");
        handle_rpc_master_server_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-ls-raw");
        handle_rpc_slave_server_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-add-raw");
        handle_rpc_slave_server_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-get-raw");
        handle_rpc_slave_server_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-set-raw");
        handle_rpc_slave_server_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-ls");
        handle_rpc_slave_server_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-add");
        handle_rpc_slave_server_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-del");
        handle_rpc_slave_server_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-get");
        handle_rpc_slave_server_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-set");
        handle_rpc_slave_server_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/slave-server-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.slave-server-upgrade");
        handle_rpc_slave_server_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/x-jmeter-cloud-store/upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-jmeter-cloud-store.upgrade");
        handle_rpc_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
