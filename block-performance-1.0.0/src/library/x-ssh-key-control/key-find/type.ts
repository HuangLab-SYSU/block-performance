// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    username: string;
    address: string;
}

export interface OutputEmpty {
    list: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[];
}

export interface OutputOk {
    list: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    empty: (output: OutputEmpty) => R;
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "username") return;
            if (field === "address") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.username must be string");
        if (typeof v.username !== "string") {
            throw new Error("v.username is not string");
        }

        log.println("v.address must be string");
        if (typeof v.address !== "string") {
            throw new Error("v.address is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_empty(v: any): OutputEmpty {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_empty(v_cloned);
    } else {
        return _copy_output_empty(v);
    }
}

export function _copy_output_empty(v: any): OutputEmpty {
    if (typeof v === "object" && v !== null) {
        const obj = {
            list: copy_list(v.list)
        };
        return obj;
    } else {
        return { list: [] };
    }

    function copy_list(
        v: any
    ): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    id: copy_id(v.id),
                    fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                    create_time: copy_create_time(v.create_time),
                    update_time: copy_update_time(v.update_time),
                    username: copy_username(v.username),
                    address_list: copy_address_list(v.address_list),
                    tag_list: copy_tag_list(v.tag_list),
                    private_key: copy_private_key(v.private_key),
                    disabled: copy_disabled(v.disabled)
                };
                return obj;
            } else {
                return { id: "", create_time: "", update_time: "", username: "", address_list: [], tag_list: [], private_key: "", disabled: false };
            }

            function copy_id(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_fake(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }

            function copy_create_time(v: any): string {
                // empty datetime value is acceptable
                if (typeof v !== "string") {
                    return "";
                } else {
                    if (v === "") {
                        return v;
                    } else if (Number.isNaN(Date.parse(v)) === false) {
                        return v;
                    } else {
                        // invalid value, return empty string
                        return "";
                    }
                }
            }

            function copy_update_time(v: any): string {
                // empty datetime value is acceptable
                if (typeof v !== "string") {
                    return "";
                } else {
                    if (v === "") {
                        return v;
                    } else if (Number.isNaN(Date.parse(v)) === false) {
                        return v;
                    } else {
                        // invalid value, return empty string
                        return "";
                    }
                }
            }

            function copy_username(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_address_list(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_tag_list(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_private_key(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_disabled(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }
        }
    }
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            list: copy_list(v.list)
        };
        return obj;
    } else {
        return { list: [] };
    }

    function copy_list(
        v: any
    ): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    id: copy_id(v.id),
                    fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                    create_time: copy_create_time(v.create_time),
                    update_time: copy_update_time(v.update_time),
                    username: copy_username(v.username),
                    address_list: copy_address_list(v.address_list),
                    tag_list: copy_tag_list(v.tag_list),
                    private_key: copy_private_key(v.private_key),
                    disabled: copy_disabled(v.disabled)
                };
                return obj;
            } else {
                return { id: "", create_time: "", update_time: "", username: "", address_list: [], tag_list: [], private_key: "", disabled: false };
            }

            function copy_id(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_fake(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }

            function copy_create_time(v: any): string {
                // empty datetime value is acceptable
                if (typeof v !== "string") {
                    return "";
                } else {
                    if (v === "") {
                        return v;
                    } else if (Number.isNaN(Date.parse(v)) === false) {
                        return v;
                    } else {
                        // invalid value, return empty string
                        return "";
                    }
                }
            }

            function copy_update_time(v: any): string {
                // empty datetime value is acceptable
                if (typeof v !== "string") {
                    return "";
                } else {
                    if (v === "") {
                        return v;
                    } else if (Number.isNaN(Date.parse(v)) === false) {
                        return v;
                    } else {
                        // invalid value, return empty string
                        return "";
                    }
                }
            }

            function copy_username(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_address_list(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_tag_list(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_private_key(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_disabled(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
