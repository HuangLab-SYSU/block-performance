// auto generated by dev/system
import * as path from "node:path";
import express from "express";
import multer from "multer";
import * as fs from "node:fs/promises";
import { Logger } from "../../../myutils/logger.js";
import { classic } from "../../../myutils/node/classic.js";
const { __dirname } = classic(import.meta.url);

export function attach_upload_handler(plog: Logger, opt: { exp_app: express.Express; url_prefix: string }) {
    const log = plog.sub("server.attach_upload_handler");
    const { exp_app, url_prefix } = opt;

    const upload_dir = path.resolve(__dirname, "../_webroot-upload/");
    log.variable("upload_dir", upload_dir);

    const upload = multer({
        storage: multer.diskStorage({
            destination: (req, file, cb) => {
                const sublog = log.sub("destination");
                sublog.variable("file", file);
                const final_dir = path.dirname(path.resolve(upload_dir, must_be_safe_path(sublog, file.fieldname)));
                sublog.variable("final_dir", final_dir);
                fs.mkdir(final_dir, { recursive: true })
                    .then(() => {
                        cb(null, final_dir);
                    })
                    .catch((err) => {
                        cb(err, "");
                    });
            },
            filename: (_, file, cb) => {
                const sublog = log.sub("filename");
                sublog.variable("file", file);
                cb(null, file.originalname);
            }
        })
    });

    exp_app.use(url_prefix, express.static(path.resolve(__dirname, "../_webroot-upload")));
    exp_app.post(url_prefix, upload.any(), (req, res) => {
        const files = Array.isArray(req.files) ? req.files : [];
        log.variable("files", files);
        const result = files.map((item) => {
            return {
                original_name: must_be_safe_path(log, item.fieldname),
                uploaded_name: must_be_safe_path(log, item.fieldname)
            };
        });

        res.statusCode = 200;
        res.json(result);
    });
}

function must_be_safe_path(plog: Logger, v: string) {
    // SECURITY FIXME
    return v;
}
