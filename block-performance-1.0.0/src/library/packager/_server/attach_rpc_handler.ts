// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_build } from "../build/rpc/handle.js";
import { handle_rpc_clear } from "../clear/rpc/handle.js";
import { handle_rpc_copy } from "../copy/rpc/handle.js";
import { handle_rpc_demo_build } from "../demo-build/rpc/handle.js";
import { handle_rpc_dependency_analyze } from "../dependency-analyze/rpc/handle.js";
import { handle_rpc_docker_build_script_make } from "../docker-build-script-make/rpc/handle.js";
import { handle_rpc_docker_build_script_write } from "../docker-build-script-write/rpc/handle.js";
import { handle_rpc_dockerfile_make } from "../dockerfile-make/rpc/handle.js";
import { handle_rpc_dockerfile_write } from "../dockerfile-write/rpc/handle.js";
import { handle_rpc_npm_package_analyze } from "../npm-package-analyze/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/packager/build", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.build");
        handle_rpc_build(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/clear", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.clear");
        handle_rpc_clear(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/copy", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.copy");
        handle_rpc_copy(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/demo-build", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.demo-build");
        handle_rpc_demo_build(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/dependency-analyze", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.dependency-analyze");
        handle_rpc_dependency_analyze(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/docker-build-script-make", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.docker-build-script-make");
        handle_rpc_docker_build_script_make(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/docker-build-script-write", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.docker-build-script-write");
        handle_rpc_docker_build_script_write(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/dockerfile-make", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.dockerfile-make");
        handle_rpc_dockerfile_make(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/dockerfile-write", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.dockerfile-write");
        handle_rpc_dockerfile_write(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/packager/npm-package-analyze", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.packager.npm-package-analyze");
        handle_rpc_npm_package_analyze(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
