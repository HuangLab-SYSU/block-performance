// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    name: string;
    version: string;
    library_list: string[];
    npm_script: { dev: string; start: string; stop: string };
    customize_file_list: { name: string; json_data?: { [key: string]: any } }[];
    output_dir: string;
}

export interface OutputOk {
    target_dir: string;
    target_tar_zip_file: string;
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "name") return;
            if (field === "version") return;
            if (field === "library_list") return;
            if (field === "npm_script") return;
            if (field === "customize_file_list") return;
            if (field === "output_dir") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.name must be string");
        if (typeof v.name !== "string") {
            throw new Error("v.name is not string");
        }

        log.println("v.version must be string");
        if (typeof v.version !== "string") {
            throw new Error("v.version is not string");
        }

        log.println("v.library_list must be array");
        if (!Array.isArray(v.library_list)) {
            throw new Error("v.library_list is not array");
        }

        v.library_list.forEach((item: any, i: number) => {
            log.println("check v.library_list[i]");

            log.println("item must be string");
            if (typeof item !== "string") {
                throw new Error("item is not string");
            }
        });

        log.println("v.npm_script must be object");
        if (typeof v.npm_script !== "object" || v.npm_script === null) {
            throw new Error("v.npm_script is not object");
        }

        Object.keys(v.npm_script).forEach((field) => {
            if (field === "dev") return;
            if (field === "start") return;
            if (field === "stop") return;
            throw new Error("v.npm_script contains unknown field: " + field);
        });

        log.println("v.npm_script.dev must be string");
        if (typeof v.npm_script.dev !== "string") {
            throw new Error("v.npm_script.dev is not string");
        }

        log.println("v.npm_script.start must be string");
        if (typeof v.npm_script.start !== "string") {
            throw new Error("v.npm_script.start is not string");
        }

        log.println("v.npm_script.stop must be string");
        if (typeof v.npm_script.stop !== "string") {
            throw new Error("v.npm_script.stop is not string");
        }

        log.println("v.customize_file_list must be array");
        if (!Array.isArray(v.customize_file_list)) {
            throw new Error("v.customize_file_list is not array");
        }

        v.customize_file_list.forEach((item: any, i: number) => {
            log.println("check v.customize_file_list[i]");

            log.println("item must be object");
            if (typeof item !== "object" || item === null) {
                throw new Error("item is not object");
            }

            Object.keys(item).forEach((field) => {
                if (field === "name") return;
                if (field === "json_data") return;
                throw new Error("item contains unknown field: " + field);
            });

            log.println("item.name must be string");
            if (typeof item.name !== "string") {
                throw new Error("item.name is not string");
            }

            if (item.json_data !== undefined) {
                log.println("item.json_data must be object");
                if (typeof item.json_data !== "object" || item.json_data === null) {
                    throw new Error("item.json_data is not object");
                }

                Object.keys(item.json_data).forEach((field) => {
                    // a dynamic field, check it (FIXME log message is not clear)

                    log.println("item.json_data[field] must be any (ignore)");
                });
            }
        });

        log.println("v.output_dir must be string");
        if (typeof v.output_dir !== "string") {
            throw new Error("v.output_dir is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            target_dir: copy_target_dir(v.target_dir),
            target_tar_zip_file: copy_target_tar_zip_file(v.target_tar_zip_file)
        };
        return obj;
    } else {
        return { target_dir: "", target_tar_zip_file: "" };
    }

    function copy_target_dir(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_target_tar_zip_file(v: any): string {
        return typeof v === "string" ? v : "";
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
