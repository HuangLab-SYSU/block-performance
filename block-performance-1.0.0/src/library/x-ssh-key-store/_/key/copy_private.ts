// auto generated by dev/system

export function copy_private(v: any): {
    id: string;
    fake?: boolean;
    create_time: string;
    update_time: string;
    username: string;
    address_list: string[];
    tag_list: string[];
    private_key: string;
    disabled: boolean;
} {
    if (typeof v === "object" && v !== null) {
        const obj = {
            id: copy_id(v.id),
            fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
            create_time: copy_create_time(v.create_time),
            update_time: copy_update_time(v.update_time),
            username: copy_username(v.username),
            address_list: copy_address_list(v.address_list),
            tag_list: copy_tag_list(v.tag_list),
            private_key: copy_private_key(v.private_key),
            disabled: copy_disabled(v.disabled)
        };
        return obj;
    } else {
        return { id: "", create_time: "", update_time: "", username: "", address_list: [], tag_list: [], private_key: "", disabled: false };
    }

    function copy_id(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_fake(v: any): boolean {
        return typeof v === "boolean" ? v : false;
    }

    function copy_create_time(v: any): string {
        // empty datetime value is acceptable
        if (typeof v !== "string") {
            return "";
        } else {
            if (v === "") {
                return v;
            } else if (Number.isNaN(Date.parse(v)) === false) {
                return v;
            } else {
                // invalid value, return empty string
                return "";
            }
        }
    }

    function copy_update_time(v: any): string {
        // empty datetime value is acceptable
        if (typeof v !== "string") {
            return "";
        } else {
            if (v === "") {
                return v;
            } else if (Number.isNaN(Date.parse(v)) === false) {
                return v;
            } else {
                // invalid value, return empty string
                return "";
            }
        }
    }

    function copy_username(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_address_list(v: any): string[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_tag_list(v: any): string[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_private_key(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_disabled(v: any): boolean {
        return typeof v === "boolean" ? v : false;
    }
}
