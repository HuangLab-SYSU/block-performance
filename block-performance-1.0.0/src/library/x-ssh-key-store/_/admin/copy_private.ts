// auto generated by dev/system

export function copy_private(v: any): {
    id: string;
    fake?: boolean;
    create_time: string;
    update_time: string;
    finger: string;
    token: string;
    username: string;
    password: string;
    avatar_url: string;
    real_name: string;
    gender: "unknown" | "male" | "female";
    birthday: string;
    email: string;
    phone_number_country_code: string;
    phone_number: string;
} {
    if (typeof v === "object" && v !== null) {
        const obj = {
            id: copy_id(v.id),
            fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
            create_time: copy_create_time(v.create_time),
            update_time: copy_update_time(v.update_time),
            finger: copy_finger(v.finger),
            token: copy_token(v.token),
            username: copy_username(v.username),
            password: copy_password(v.password),
            avatar_url: copy_avatar_url(v.avatar_url),
            real_name: copy_real_name(v.real_name),
            gender: copy_gender(v.gender),
            birthday: copy_birthday(v.birthday),
            email: copy_email(v.email),
            phone_number_country_code: copy_phone_number_country_code(v.phone_number_country_code),
            phone_number: copy_phone_number(v.phone_number)
        };
        return obj;
    } else {
        return {
            id: "",
            create_time: "",
            update_time: "",
            finger: "",
            token: "",
            username: "",
            password: "",
            avatar_url: "",
            real_name: "",
            gender: "unknown",
            birthday: "",
            email: "",
            phone_number_country_code: "",
            phone_number: ""
        };
    }

    function copy_id(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_fake(v: any): boolean {
        return typeof v === "boolean" ? v : false;
    }

    function copy_create_time(v: any): string {
        // empty datetime value is acceptable
        if (typeof v !== "string") {
            return "";
        } else {
            if (v === "") {
                return v;
            } else if (Number.isNaN(Date.parse(v)) === false) {
                return v;
            } else {
                // invalid value, return empty string
                return "";
            }
        }
    }

    function copy_update_time(v: any): string {
        // empty datetime value is acceptable
        if (typeof v !== "string") {
            return "";
        } else {
            if (v === "") {
                return v;
            } else if (Number.isNaN(Date.parse(v)) === false) {
                return v;
            } else {
                // invalid value, return empty string
                return "";
            }
        }
    }

    function copy_finger(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_token(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_username(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_password(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_avatar_url(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_real_name(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_gender(v: any): "unknown" | "male" | "female" {
        if (typeof v === "string" && new Set(["unknown", "male", "female"]).has(v) === true) {
            return v as any;
        } else {
            return "unknown" as any;
        }
    }

    function copy_birthday(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_email(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_phone_number_country_code(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_phone_number(v: any): string {
        return typeof v === "string" ? v : "";
    }
}
