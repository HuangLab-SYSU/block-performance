// auto generated by dev/system

export function make_input(
    cb?: (o: {
        sort?: {
            field_list: {
                id?: { order: "ascending" | "descending" };
                fake?: { order: "ascending" | "descending" };
                create_time?: { order: "ascending" | "descending" };
                update_time?: { order: "ascending" | "descending" };
                username?: { order: "ascending" | "descending" };
                address_list?: { index: number; item: { order: "ascending" | "descending" } };
                tag_list?: { index: number; item: { order: "ascending" | "descending" } };
                private_key?: { order: "ascending" | "descending" };
                disabled?: { order: "ascending" | "descending" };
            }[];
        };
        page?: { offset: number; limit: number };
    }) => void
): {
    sort?: {
        field_list: {
            id?: { order: "ascending" | "descending" };
            fake?: { order: "ascending" | "descending" };
            create_time?: { order: "ascending" | "descending" };
            update_time?: { order: "ascending" | "descending" };
            username?: { order: "ascending" | "descending" };
            address_list?: { index: number; item: { order: "ascending" | "descending" } };
            tag_list?: { index: number; item: { order: "ascending" | "descending" } };
            private_key?: { order: "ascending" | "descending" };
            disabled?: { order: "ascending" | "descending" };
        }[];
    };
    page?: { offset: number; limit: number };
} {
    const item: {
        sort?: {
            field_list: {
                id?: { order: "ascending" | "descending" };
                fake?: { order: "ascending" | "descending" };
                create_time?: { order: "ascending" | "descending" };
                update_time?: { order: "ascending" | "descending" };
                username?: { order: "ascending" | "descending" };
                address_list?: { index: number; item: { order: "ascending" | "descending" } };
                tag_list?: { index: number; item: { order: "ascending" | "descending" } };
                private_key?: { order: "ascending" | "descending" };
                disabled?: { order: "ascending" | "descending" };
            }[];
        };
        page?: { offset: number; limit: number };
    } = {};
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_empty(
    cb?: (o: {
        list: {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        }[];
        total_count: number;
    }) => void
): {
    list: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[];
    total_count: number;
} {
    const item: {
        list: {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        }[];
        total_count: number;
    } = { list: [], total_count: 0 };
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_ok(
    cb?: (o: {
        list: {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        }[];
        total_count: number;
    }) => void
): {
    list: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        username: string;
        address_list: string[];
        tag_list: string[];
        private_key: string;
        disabled: boolean;
    }[];
    total_count: number;
} {
    const item: {
        list: {
            id: string;
            fake?: boolean;
            create_time: string;
            update_time: string;
            username: string;
            address_list: string[];
            tag_list: string[];
            private_key: string;
            disabled: boolean;
        }[];
        total_count: number;
    } = { list: [], total_count: 0 };
    if (cb) {
        cb(item);
    }
    return item;
}
