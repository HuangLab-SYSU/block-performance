// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    admin: {
        id: string;
        fake?: boolean;
        finger: string;
        token: string;
        username: string;
        password: string;
        avatar_url: string;
        real_name: string;
        gender: "unknown" | "male" | "female";
        birthday: string;
        email: string;
        phone_number_country_code: string;
        phone_number: string;
    };
}

export interface OutputOk {}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "admin") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.admin must be object");
        if (typeof v.admin !== "object" || v.admin === null) {
            throw new Error("v.admin is not object");
        }

        Object.keys(v.admin).forEach((field) => {
            if (field === "id") return;
            if (field === "fake") return;
            if (field === "finger") return;
            if (field === "token") return;
            if (field === "username") return;
            if (field === "password") return;
            if (field === "avatar_url") return;
            if (field === "real_name") return;
            if (field === "gender") return;
            if (field === "birthday") return;
            if (field === "email") return;
            if (field === "phone_number_country_code") return;
            if (field === "phone_number") return;
            throw new Error("v.admin contains unknown field: " + field);
        });

        log.println("v.admin.id must be string");
        if (typeof v.admin.id !== "string") {
            throw new Error("v.admin.id is not string");
        }

        if (v.admin.fake !== undefined) {
            log.println("v.admin.fake must be boolean");
            if (typeof v.admin.fake !== "boolean") {
                throw new Error("v.admin.fake is not boolean");
            }
        }

        log.println("v.admin.finger must be string");
        if (typeof v.admin.finger !== "string") {
            throw new Error("v.admin.finger is not string");
        }

        log.println("v.admin.token must be string");
        if (typeof v.admin.token !== "string") {
            throw new Error("v.admin.token is not string");
        }

        log.println("v.admin.username must be string");
        if (typeof v.admin.username !== "string") {
            throw new Error("v.admin.username is not string");
        }

        log.println("v.admin.password must be string");
        if (typeof v.admin.password !== "string") {
            throw new Error("v.admin.password is not string");
        }

        log.println("v.admin.avatar_url must be string");
        if (typeof v.admin.avatar_url !== "string") {
            throw new Error("v.admin.avatar_url is not string");
        }

        log.println("v.admin.real_name must be string");
        if (typeof v.admin.real_name !== "string") {
            throw new Error("v.admin.real_name is not string");
        }

        log.println("v.admin.gender must be string");
        if (typeof v.admin.gender !== "string") {
            throw new Error("v.admin.gender is not string");
        }

        if (new Set(["unknown", "male", "female"]).has(v.admin.gender) === false) {
            throw new Error("v.admin.gender is not a valid string enum value");
        }

        log.println("v.admin.birthday must be string");
        if (typeof v.admin.birthday !== "string") {
            throw new Error("v.admin.birthday is not string");
        }

        log.println("v.admin.email must be string");
        if (typeof v.admin.email !== "string") {
            throw new Error("v.admin.email is not string");
        }

        log.println("v.admin.phone_number_country_code must be string");
        if (typeof v.admin.phone_number_country_code !== "string") {
            throw new Error("v.admin.phone_number_country_code is not string");
        }

        log.println("v.admin.phone_number must be string");
        if (typeof v.admin.phone_number !== "string") {
            throw new Error("v.admin.phone_number is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {};
        return obj;
    } else {
        return {};
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
