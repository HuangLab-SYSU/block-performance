// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_admin_ls_raw } from "../admin-ls-raw/rpc/handle.js";
import { handle_rpc_admin_add_raw } from "../admin-add-raw/rpc/handle.js";
import { handle_rpc_admin_get_raw } from "../admin-get-raw/rpc/handle.js";
import { handle_rpc_admin_set_raw } from "../admin-set-raw/rpc/handle.js";
import { handle_rpc_admin_ls } from "../admin-ls/rpc/handle.js";
import { handle_rpc_admin_add } from "../admin-add/rpc/handle.js";
import { handle_rpc_admin_del } from "../admin-del/rpc/handle.js";
import { handle_rpc_admin_get } from "../admin-get/rpc/handle.js";
import { handle_rpc_admin_set } from "../admin-set/rpc/handle.js";
import { handle_rpc_admin_upgrade } from "../admin-upgrade/rpc/handle.js";
import { handle_rpc_key_ls_raw } from "../key-ls-raw/rpc/handle.js";
import { handle_rpc_key_add_raw } from "../key-add-raw/rpc/handle.js";
import { handle_rpc_key_get_raw } from "../key-get-raw/rpc/handle.js";
import { handle_rpc_key_set_raw } from "../key-set-raw/rpc/handle.js";
import { handle_rpc_key_ls } from "../key-ls/rpc/handle.js";
import { handle_rpc_key_add } from "../key-add/rpc/handle.js";
import { handle_rpc_key_del } from "../key-del/rpc/handle.js";
import { handle_rpc_key_get } from "../key-get/rpc/handle.js";
import { handle_rpc_key_set } from "../key-set/rpc/handle.js";
import { handle_rpc_key_upgrade } from "../key-upgrade/rpc/handle.js";
import { handle_rpc_upgrade } from "../upgrade/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/x-ssh-key-store/admin-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-ls-raw");
        handle_rpc_admin_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-add-raw");
        handle_rpc_admin_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-get-raw");
        handle_rpc_admin_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-set-raw");
        handle_rpc_admin_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-ls");
        handle_rpc_admin_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-add");
        handle_rpc_admin_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-del");
        handle_rpc_admin_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-get");
        handle_rpc_admin_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-set");
        handle_rpc_admin_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/admin-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.admin-upgrade");
        handle_rpc_admin_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-ls-raw");
        handle_rpc_key_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-add-raw");
        handle_rpc_key_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-get-raw");
        handle_rpc_key_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-set-raw");
        handle_rpc_key_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-ls");
        handle_rpc_key_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-add");
        handle_rpc_key_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-del");
        handle_rpc_key_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-get");
        handle_rpc_key_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-set");
        handle_rpc_key_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/key-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.key-upgrade");
        handle_rpc_key_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-ssh-key-store/upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-ssh-key-store.upgrade");
        handle_rpc_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
