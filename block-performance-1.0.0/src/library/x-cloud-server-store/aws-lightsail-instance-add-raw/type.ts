// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    aws_lightsail_instance: {
        fake?: boolean;
        create_time: string;
        update_time: string;
        region: string;
        availability_zone: string;
        instance_name: string;
        blueprint_id: string;
        bundle_id: string;
        ssh_username: string;
        address_ipv4: string;
        address_ipv6: string;
    };
}

export interface OutputOk {
    id: string;
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "aws_lightsail_instance") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.aws_lightsail_instance must be object");
        if (typeof v.aws_lightsail_instance !== "object" || v.aws_lightsail_instance === null) {
            throw new Error("v.aws_lightsail_instance is not object");
        }

        Object.keys(v.aws_lightsail_instance).forEach((field) => {
            if (field === "fake") return;
            if (field === "create_time") return;
            if (field === "update_time") return;
            if (field === "region") return;
            if (field === "availability_zone") return;
            if (field === "instance_name") return;
            if (field === "blueprint_id") return;
            if (field === "bundle_id") return;
            if (field === "ssh_username") return;
            if (field === "address_ipv4") return;
            if (field === "address_ipv6") return;
            throw new Error("v.aws_lightsail_instance contains unknown field: " + field);
        });

        if (v.aws_lightsail_instance.fake !== undefined) {
            log.println("v.aws_lightsail_instance.fake must be boolean");
            if (typeof v.aws_lightsail_instance.fake !== "boolean") {
                throw new Error("v.aws_lightsail_instance.fake is not boolean");
            }
        }

        log.println("v.aws_lightsail_instance.create_time must be string");
        if (typeof v.aws_lightsail_instance.create_time !== "string") {
            throw new Error("v.aws_lightsail_instance.create_time is not string");
        }

        if (v.aws_lightsail_instance.create_time !== "" && Number.isNaN(Date.parse(v.aws_lightsail_instance.create_time))) {
            throw new Error("v.aws_lightsail_instance.create_time is not a valid datetime string");
        }

        log.println("v.aws_lightsail_instance.update_time must be string");
        if (typeof v.aws_lightsail_instance.update_time !== "string") {
            throw new Error("v.aws_lightsail_instance.update_time is not string");
        }

        if (v.aws_lightsail_instance.update_time !== "" && Number.isNaN(Date.parse(v.aws_lightsail_instance.update_time))) {
            throw new Error("v.aws_lightsail_instance.update_time is not a valid datetime string");
        }

        log.println("v.aws_lightsail_instance.region must be string");
        if (typeof v.aws_lightsail_instance.region !== "string") {
            throw new Error("v.aws_lightsail_instance.region is not string");
        }

        log.println("v.aws_lightsail_instance.availability_zone must be string");
        if (typeof v.aws_lightsail_instance.availability_zone !== "string") {
            throw new Error("v.aws_lightsail_instance.availability_zone is not string");
        }

        log.println("v.aws_lightsail_instance.instance_name must be string");
        if (typeof v.aws_lightsail_instance.instance_name !== "string") {
            throw new Error("v.aws_lightsail_instance.instance_name is not string");
        }

        log.println("v.aws_lightsail_instance.blueprint_id must be string");
        if (typeof v.aws_lightsail_instance.blueprint_id !== "string") {
            throw new Error("v.aws_lightsail_instance.blueprint_id is not string");
        }

        log.println("v.aws_lightsail_instance.bundle_id must be string");
        if (typeof v.aws_lightsail_instance.bundle_id !== "string") {
            throw new Error("v.aws_lightsail_instance.bundle_id is not string");
        }

        log.println("v.aws_lightsail_instance.ssh_username must be string");
        if (typeof v.aws_lightsail_instance.ssh_username !== "string") {
            throw new Error("v.aws_lightsail_instance.ssh_username is not string");
        }

        log.println("v.aws_lightsail_instance.address_ipv4 must be string");
        if (typeof v.aws_lightsail_instance.address_ipv4 !== "string") {
            throw new Error("v.aws_lightsail_instance.address_ipv4 is not string");
        }

        log.println("v.aws_lightsail_instance.address_ipv6 must be string");
        if (typeof v.aws_lightsail_instance.address_ipv6 !== "string") {
            throw new Error("v.aws_lightsail_instance.address_ipv6 is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            id: copy_id(v.id)
        };
        return obj;
    } else {
        return { id: "" };
    }

    function copy_id(v: any): string {
        return typeof v === "string" ? v : "";
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
