// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    id: string;
}

export interface OutputNone {
    admin: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        finger: string;
        token: string;
        username: string;
        password: string;
        avatar_url: string;
        real_name: string;
        gender: "unknown" | "male" | "female";
        birthday: string;
        email: string;
        phone_number_country_code: string;
        phone_number: string;
    };
}

export interface OutputOk {
    admin: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        finger: string;
        token: string;
        username: string;
        password: string;
        avatar_url: string;
        real_name: string;
        gender: "unknown" | "male" | "female";
        birthday: string;
        email: string;
        phone_number_country_code: string;
        phone_number: string;
    };
}

export interface OutputFail {}

export interface Callback<R> {
    none: (output: OutputNone) => R;
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "id") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.id must be string");
        if (typeof v.id !== "string") {
            throw new Error("v.id is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_none(v: any): OutputNone {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_none(v_cloned);
    } else {
        return _copy_output_none(v);
    }
}

export function _copy_output_none(v: any): OutputNone {
    if (typeof v === "object" && v !== null) {
        const obj = {
            admin: copy_admin(v.admin)
        };
        return obj;
    } else {
        return {
            admin: {
                id: "",
                create_time: "",
                update_time: "",
                finger: "",
                token: "",
                username: "",
                password: "",
                avatar_url: "",
                real_name: "",
                gender: "unknown",
                birthday: "",
                email: "",
                phone_number_country_code: "",
                phone_number: ""
            }
        };
    }

    function copy_admin(v: any): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        finger: string;
        token: string;
        username: string;
        password: string;
        avatar_url: string;
        real_name: string;
        gender: "unknown" | "male" | "female";
        birthday: string;
        email: string;
        phone_number_country_code: string;
        phone_number: string;
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                id: copy_id(v.id),
                fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                create_time: copy_create_time(v.create_time),
                update_time: copy_update_time(v.update_time),
                finger: copy_finger(v.finger),
                token: copy_token(v.token),
                username: copy_username(v.username),
                password: copy_password(v.password),
                avatar_url: copy_avatar_url(v.avatar_url),
                real_name: copy_real_name(v.real_name),
                gender: copy_gender(v.gender),
                birthday: copy_birthday(v.birthday),
                email: copy_email(v.email),
                phone_number_country_code: copy_phone_number_country_code(v.phone_number_country_code),
                phone_number: copy_phone_number(v.phone_number)
            };
            return obj;
        } else {
            return {
                id: "",
                create_time: "",
                update_time: "",
                finger: "",
                token: "",
                username: "",
                password: "",
                avatar_url: "",
                real_name: "",
                gender: "unknown",
                birthday: "",
                email: "",
                phone_number_country_code: "",
                phone_number: ""
            };
        }

        function copy_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_fake(v: any): boolean {
            return typeof v === "boolean" ? v : false;
        }

        function copy_create_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_update_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_finger(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_token(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_username(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_password(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_avatar_url(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_real_name(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_gender(v: any): "unknown" | "male" | "female" {
            if (typeof v === "string" && new Set(["unknown", "male", "female"]).has(v) === true) {
                return v as any;
            } else {
                return "unknown" as any;
            }
        }

        function copy_birthday(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_email(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_phone_number_country_code(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_phone_number(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            admin: copy_admin(v.admin)
        };
        return obj;
    } else {
        return {
            admin: {
                id: "",
                create_time: "",
                update_time: "",
                finger: "",
                token: "",
                username: "",
                password: "",
                avatar_url: "",
                real_name: "",
                gender: "unknown",
                birthday: "",
                email: "",
                phone_number_country_code: "",
                phone_number: ""
            }
        };
    }

    function copy_admin(v: any): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        finger: string;
        token: string;
        username: string;
        password: string;
        avatar_url: string;
        real_name: string;
        gender: "unknown" | "male" | "female";
        birthday: string;
        email: string;
        phone_number_country_code: string;
        phone_number: string;
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                id: copy_id(v.id),
                fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                create_time: copy_create_time(v.create_time),
                update_time: copy_update_time(v.update_time),
                finger: copy_finger(v.finger),
                token: copy_token(v.token),
                username: copy_username(v.username),
                password: copy_password(v.password),
                avatar_url: copy_avatar_url(v.avatar_url),
                real_name: copy_real_name(v.real_name),
                gender: copy_gender(v.gender),
                birthday: copy_birthday(v.birthday),
                email: copy_email(v.email),
                phone_number_country_code: copy_phone_number_country_code(v.phone_number_country_code),
                phone_number: copy_phone_number(v.phone_number)
            };
            return obj;
        } else {
            return {
                id: "",
                create_time: "",
                update_time: "",
                finger: "",
                token: "",
                username: "",
                password: "",
                avatar_url: "",
                real_name: "",
                gender: "unknown",
                birthday: "",
                email: "",
                phone_number_country_code: "",
                phone_number: ""
            };
        }

        function copy_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_fake(v: any): boolean {
            return typeof v === "boolean" ? v : false;
        }

        function copy_create_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_update_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_finger(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_token(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_username(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_password(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_avatar_url(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_real_name(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_gender(v: any): "unknown" | "male" | "female" {
            if (typeof v === "string" && new Set(["unknown", "male", "female"]).has(v) === true) {
                return v as any;
            } else {
                return "unknown" as any;
            }
        }

        function copy_birthday(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_email(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_phone_number_country_code(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_phone_number(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
