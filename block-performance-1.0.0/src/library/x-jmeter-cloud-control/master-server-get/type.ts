// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    master_server_id: string;
}

export interface OutputOk {
    master_server: {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        cloud_server: { aws_lightsail_instance_id: string };
        ssh_username: string;
        address_ipv4: string;
    };
}

export interface OutputFail {}

export interface Callback<R> {
    none: () => R;
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "master_server_id") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.master_server_id must be string");
        if (typeof v.master_server_id !== "string") {
            throw new Error("v.master_server_id is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            master_server: copy_master_server(v.master_server)
        };
        return obj;
    } else {
        return {
            master_server: { id: "", create_time: "", update_time: "", cloud_server: { aws_lightsail_instance_id: "" }, ssh_username: "", address_ipv4: "" }
        };
    }

    function copy_master_server(v: any): {
        id: string;
        fake?: boolean;
        create_time: string;
        update_time: string;
        cloud_server: { aws_lightsail_instance_id: string };
        ssh_username: string;
        address_ipv4: string;
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                id: copy_id(v.id),
                fake: v.fake !== undefined && v.fake !== null ? copy_fake(v.fake) : undefined,
                create_time: copy_create_time(v.create_time),
                update_time: copy_update_time(v.update_time),
                cloud_server: copy_cloud_server(v.cloud_server),
                ssh_username: copy_ssh_username(v.ssh_username),
                address_ipv4: copy_address_ipv4(v.address_ipv4)
            };
            return obj;
        } else {
            return { id: "", create_time: "", update_time: "", cloud_server: { aws_lightsail_instance_id: "" }, ssh_username: "", address_ipv4: "" };
        }

        function copy_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_fake(v: any): boolean {
            return typeof v === "boolean" ? v : false;
        }

        function copy_create_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_update_time(v: any): string {
            // empty datetime value is acceptable
            if (typeof v !== "string") {
                return "";
            } else {
                if (v === "") {
                    return v;
                } else if (Number.isNaN(Date.parse(v)) === false) {
                    return v;
                } else {
                    // invalid value, return empty string
                    return "";
                }
            }
        }

        function copy_cloud_server(v: any): { aws_lightsail_instance_id: string } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    aws_lightsail_instance_id: copy_aws_lightsail_instance_id(v.aws_lightsail_instance_id)
                };
                return obj;
            } else {
                return { aws_lightsail_instance_id: "" };
            }

            function copy_aws_lightsail_instance_id(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }

        function copy_ssh_username(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_address_ipv4(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
