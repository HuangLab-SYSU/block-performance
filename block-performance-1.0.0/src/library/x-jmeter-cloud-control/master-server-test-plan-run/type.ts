// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    master_server_id: string;
    remote_test_plan_file_path: string;
}

export interface OutputOk {
    output_jtl_file_path: string;
    output_html_report_directory_path: string;
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "master_server_id") return;
            if (field === "remote_test_plan_file_path") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.master_server_id must be string");
        if (typeof v.master_server_id !== "string") {
            throw new Error("v.master_server_id is not string");
        }

        log.println("v.remote_test_plan_file_path must be string");
        if (typeof v.remote_test_plan_file_path !== "string") {
            throw new Error("v.remote_test_plan_file_path is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            output_jtl_file_path: copy_output_jtl_file_path(v.output_jtl_file_path),
            output_html_report_directory_path: copy_output_html_report_directory_path(v.output_html_report_directory_path)
        };
        return obj;
    } else {
        return { output_jtl_file_path: "", output_html_report_directory_path: "" };
    }

    function copy_output_jtl_file_path(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_output_html_report_directory_path(v: any): string {
        return typeof v === "string" ? v : "";
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
