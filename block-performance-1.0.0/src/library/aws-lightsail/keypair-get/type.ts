// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    keyPairName: string;
}

export interface OutputOk {
    keyPair: {
        arn: string;
        createdAt: string;
        fingerprint: string;
        location: { availabilityZone: string; regionName: string };
        name: string;
        resourceType: string;
        supportCode: string;
        tags: { key: string; value: string }[];
    };
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "keyPairName") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        log.println("v.keyPairName must be string");
        if (typeof v.keyPairName !== "string") {
            throw new Error("v.keyPairName is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            keyPair: copy_keyPair(v.keyPair)
        };
        return obj;
    } else {
        return {
            keyPair: {
                arn: "",
                createdAt: "",
                fingerprint: "",
                location: { availabilityZone: "", regionName: "" },
                name: "",
                resourceType: "",
                supportCode: "",
                tags: []
            }
        };
    }

    function copy_keyPair(v: any): {
        arn: string;
        createdAt: string;
        fingerprint: string;
        location: { availabilityZone: string; regionName: string };
        name: string;
        resourceType: string;
        supportCode: string;
        tags: { key: string; value: string }[];
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                arn: copy_arn(v.arn),
                createdAt: copy_createdAt(v.createdAt),
                fingerprint: copy_fingerprint(v.fingerprint),
                location: copy_location(v.location),
                name: copy_name(v.name),
                resourceType: copy_resourceType(v.resourceType),
                supportCode: copy_supportCode(v.supportCode),
                tags: copy_tags(v.tags)
            };
            return obj;
        } else {
            return {
                arn: "",
                createdAt: "",
                fingerprint: "",
                location: { availabilityZone: "", regionName: "" },
                name: "",
                resourceType: "",
                supportCode: "",
                tags: []
            };
        }

        function copy_arn(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_createdAt(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_fingerprint(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_location(v: any): { availabilityZone: string; regionName: string } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    availabilityZone: copy_availabilityZone(v.availabilityZone),
                    regionName: copy_regionName(v.regionName)
                };
                return obj;
            } else {
                return { availabilityZone: "", regionName: "" };
            }

            function copy_availabilityZone(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_regionName(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }

        function copy_name(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_resourceType(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_supportCode(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_tags(v: any): { key: string; value: string }[] {
            return Array.isArray(v) ? v.map(copy_item) : [];

            function copy_item(v: any): { key: string; value: string } {
                if (typeof v === "object" && v !== null) {
                    const obj = {
                        key: copy_key(v.key),
                        value: copy_value(v.value)
                    };
                    return obj;
                } else {
                    return { key: "", value: "" };
                }

                function copy_key(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_value(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
