// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region: string;
}

export interface OutputOk {
    blueprints: {
        blueprintId: string;
        name: string;
        group: string;
        type: string;
        description: string;
        isActive: boolean;
        minPower: number;
        version: string;
        versionCode: string;
        productUrl: string;
        licenseUrl: string;
        platform: string;
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        log.println("v.region must be string");
        if (typeof v.region !== "string") {
            throw new Error("v.region is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            blueprints: copy_blueprints(v.blueprints)
        };
        return obj;
    } else {
        return { blueprints: [] };
    }

    function copy_blueprints(
        v: any
    ): {
        blueprintId: string;
        name: string;
        group: string;
        type: string;
        description: string;
        isActive: boolean;
        minPower: number;
        version: string;
        versionCode: string;
        productUrl: string;
        licenseUrl: string;
        platform: string;
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            blueprintId: string;
            name: string;
            group: string;
            type: string;
            description: string;
            isActive: boolean;
            minPower: number;
            version: string;
            versionCode: string;
            productUrl: string;
            licenseUrl: string;
            platform: string;
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    blueprintId: copy_blueprintId(v.blueprintId),
                    name: copy_name(v.name),
                    group: copy_group(v.group),
                    type: copy_type(v.type),
                    description: copy_description(v.description),
                    isActive: copy_isActive(v.isActive),
                    minPower: copy_minPower(v.minPower),
                    version: copy_version(v.version),
                    versionCode: copy_versionCode(v.versionCode),
                    productUrl: copy_productUrl(v.productUrl),
                    licenseUrl: copy_licenseUrl(v.licenseUrl),
                    platform: copy_platform(v.platform)
                };
                return obj;
            } else {
                return {
                    blueprintId: "",
                    name: "",
                    group: "",
                    type: "",
                    description: "",
                    isActive: false,
                    minPower: 0,
                    version: "",
                    versionCode: "",
                    productUrl: "",
                    licenseUrl: "",
                    platform: ""
                };
            }

            function copy_blueprintId(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_name(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_group(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_type(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_description(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_isActive(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }

            function copy_minPower(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_version(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_versionCode(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_productUrl(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_licenseUrl(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_platform(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
