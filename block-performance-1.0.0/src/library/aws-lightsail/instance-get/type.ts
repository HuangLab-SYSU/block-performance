// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
}

export interface OutputOk {
    name: string;
    arn: string;
    supportCode: string;
    createdAt: string;
    location: { availabilityZone: string; regionName: string };
    resourceType: string;
    tags: { key: string; value: string }[];
    blueprintId: string;
    blueprintName: string;
    bundleId: string;
    addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
    isStaticIp: boolean;
    privateIpAddress: string;
    publicIpAddress: string;
    ipv6Addresses: string[];
    ipAddressType: string;
    hardware: {
        cpuCount: number;
        ramSizeInGb: number;
        disks: {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            sizeInGb: number;
            isSystemDisk: boolean;
            iops: number;
            path: string;
            state: string;
            attachedTo: string;
            isAttached: boolean;
        }[];
    };
    networking: {
        monthlyTransfer: { gbPerMonthAllocated: number };
        ports: {
            fromPort: number;
            toPort: number;
            protocol: string;
            accessFrom: string;
            accessType: string;
            commonName: string;
            accessDirection: "inbound" | "outbound";
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[];
    };
    state: { code: number; name: string };
    username: string;
    sshKeyName: string;
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "instanceName") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        log.println("v.instanceName must be string");
        if (typeof v.instanceName !== "string") {
            throw new Error("v.instanceName is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            name: copy_name(v.name),
            arn: copy_arn(v.arn),
            supportCode: copy_supportCode(v.supportCode),
            createdAt: copy_createdAt(v.createdAt),
            location: copy_location(v.location),
            resourceType: copy_resourceType(v.resourceType),
            tags: copy_tags(v.tags),
            blueprintId: copy_blueprintId(v.blueprintId),
            blueprintName: copy_blueprintName(v.blueprintName),
            bundleId: copy_bundleId(v.bundleId),
            addOns: copy_addOns(v.addOns),
            isStaticIp: copy_isStaticIp(v.isStaticIp),
            privateIpAddress: copy_privateIpAddress(v.privateIpAddress),
            publicIpAddress: copy_publicIpAddress(v.publicIpAddress),
            ipv6Addresses: copy_ipv6Addresses(v.ipv6Addresses),
            ipAddressType: copy_ipAddressType(v.ipAddressType),
            hardware: copy_hardware(v.hardware),
            networking: copy_networking(v.networking),
            state: copy_state(v.state),
            username: copy_username(v.username),
            sshKeyName: copy_sshKeyName(v.sshKeyName)
        };
        return obj;
    } else {
        return {
            name: "",
            arn: "",
            supportCode: "",
            createdAt: "",
            location: { availabilityZone: "", regionName: "" },
            resourceType: "",
            tags: [],
            blueprintId: "",
            blueprintName: "",
            bundleId: "",
            addOns: [],
            isStaticIp: false,
            privateIpAddress: "",
            publicIpAddress: "",
            ipv6Addresses: [],
            ipAddressType: "",
            hardware: { cpuCount: 0, ramSizeInGb: 0, disks: [] },
            networking: { monthlyTransfer: { gbPerMonthAllocated: 0 }, ports: [] },
            state: { code: 0, name: "" },
            username: "",
            sshKeyName: ""
        };
    }

    function copy_name(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_arn(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_supportCode(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_createdAt(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_location(v: any): { availabilityZone: string; regionName: string } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                availabilityZone: copy_availabilityZone(v.availabilityZone),
                regionName: copy_regionName(v.regionName)
            };
            return obj;
        } else {
            return { availabilityZone: "", regionName: "" };
        }

        function copy_availabilityZone(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_regionName(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_resourceType(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_tags(v: any): { key: string; value: string }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): { key: string; value: string } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    key: copy_key(v.key),
                    value: copy_value(v.value)
                };
                return obj;
            } else {
                return { key: "", value: "" };
            }

            function copy_key(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_value(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }
    }

    function copy_blueprintId(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_blueprintName(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_bundleId(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_addOns(v: any): { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    name: copy_name(v.name),
                    status: copy_status(v.status),
                    snapshotTimeOfDay: copy_snapshotTimeOfDay(v.snapshotTimeOfDay),
                    nextSnapshotTimeOfDay: copy_nextSnapshotTimeOfDay(v.nextSnapshotTimeOfDay)
                };
                return obj;
            } else {
                return { name: "", status: "", snapshotTimeOfDay: "", nextSnapshotTimeOfDay: "" };
            }

            function copy_name(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_status(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_snapshotTimeOfDay(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_nextSnapshotTimeOfDay(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }
    }

    function copy_isStaticIp(v: any): boolean {
        return typeof v === "boolean" ? v : false;
    }

    function copy_privateIpAddress(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_publicIpAddress(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_ipv6Addresses(v: any): string[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_ipAddressType(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_hardware(v: any): {
        cpuCount: number;
        ramSizeInGb: number;
        disks: {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            sizeInGb: number;
            isSystemDisk: boolean;
            iops: number;
            path: string;
            state: string;
            attachedTo: string;
            isAttached: boolean;
        }[];
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                cpuCount: copy_cpuCount(v.cpuCount),
                ramSizeInGb: copy_ramSizeInGb(v.ramSizeInGb),
                disks: copy_disks(v.disks)
            };
            return obj;
        } else {
            return { cpuCount: 0, ramSizeInGb: 0, disks: [] };
        }

        function copy_cpuCount(v: any): number {
            return typeof v === "number" ? v : 0;
        }

        function copy_ramSizeInGb(v: any): number {
            return typeof v === "number" ? v : 0;
        }

        function copy_disks(
            v: any
        ): {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            sizeInGb: number;
            isSystemDisk: boolean;
            iops: number;
            path: string;
            state: string;
            attachedTo: string;
            isAttached: boolean;
        }[] {
            return Array.isArray(v) ? v.map(copy_item) : [];

            function copy_item(v: any): {
                name: string;
                arn: string;
                supportCode: string;
                createdAt: string;
                location: { availabilityZone: string; regionName: string };
                resourceType: string;
                tags: { key: string; value: string }[];
                addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                sizeInGb: number;
                isSystemDisk: boolean;
                iops: number;
                path: string;
                state: string;
                attachedTo: string;
                isAttached: boolean;
            } {
                if (typeof v === "object" && v !== null) {
                    const obj = {
                        name: copy_name(v.name),
                        arn: copy_arn(v.arn),
                        supportCode: copy_supportCode(v.supportCode),
                        createdAt: copy_createdAt(v.createdAt),
                        location: copy_location(v.location),
                        resourceType: copy_resourceType(v.resourceType),
                        tags: copy_tags(v.tags),
                        addOns: copy_addOns(v.addOns),
                        sizeInGb: copy_sizeInGb(v.sizeInGb),
                        isSystemDisk: copy_isSystemDisk(v.isSystemDisk),
                        iops: copy_iops(v.iops),
                        path: copy_path(v.path),
                        state: copy_state(v.state),
                        attachedTo: copy_attachedTo(v.attachedTo),
                        isAttached: copy_isAttached(v.isAttached)
                    };
                    return obj;
                } else {
                    return {
                        name: "",
                        arn: "",
                        supportCode: "",
                        createdAt: "",
                        location: { availabilityZone: "", regionName: "" },
                        resourceType: "",
                        tags: [],
                        addOns: [],
                        sizeInGb: 0,
                        isSystemDisk: false,
                        iops: 0,
                        path: "",
                        state: "",
                        attachedTo: "",
                        isAttached: false
                    };
                }

                function copy_name(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_arn(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_supportCode(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_createdAt(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_location(v: any): { availabilityZone: string; regionName: string } {
                    if (typeof v === "object" && v !== null) {
                        const obj = {
                            availabilityZone: copy_availabilityZone(v.availabilityZone),
                            regionName: copy_regionName(v.regionName)
                        };
                        return obj;
                    } else {
                        return { availabilityZone: "", regionName: "" };
                    }

                    function copy_availabilityZone(v: any): string {
                        return typeof v === "string" ? v : "";
                    }

                    function copy_regionName(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }

                function copy_resourceType(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_tags(v: any): { key: string; value: string }[] {
                    return Array.isArray(v) ? v.map(copy_item) : [];

                    function copy_item(v: any): { key: string; value: string } {
                        if (typeof v === "object" && v !== null) {
                            const obj = {
                                key: copy_key(v.key),
                                value: copy_value(v.value)
                            };
                            return obj;
                        } else {
                            return { key: "", value: "" };
                        }

                        function copy_key(v: any): string {
                            return typeof v === "string" ? v : "";
                        }

                        function copy_value(v: any): string {
                            return typeof v === "string" ? v : "";
                        }
                    }
                }

                function copy_addOns(v: any): { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[] {
                    return Array.isArray(v) ? v.map(copy_item) : [];

                    function copy_item(v: any): { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string } {
                        if (typeof v === "object" && v !== null) {
                            const obj = {
                                name: copy_name(v.name),
                                status: copy_status(v.status),
                                snapshotTimeOfDay: copy_snapshotTimeOfDay(v.snapshotTimeOfDay),
                                nextSnapshotTimeOfDay: copy_nextSnapshotTimeOfDay(v.nextSnapshotTimeOfDay)
                            };
                            return obj;
                        } else {
                            return { name: "", status: "", snapshotTimeOfDay: "", nextSnapshotTimeOfDay: "" };
                        }

                        function copy_name(v: any): string {
                            return typeof v === "string" ? v : "";
                        }

                        function copy_status(v: any): string {
                            return typeof v === "string" ? v : "";
                        }

                        function copy_snapshotTimeOfDay(v: any): string {
                            return typeof v === "string" ? v : "";
                        }

                        function copy_nextSnapshotTimeOfDay(v: any): string {
                            return typeof v === "string" ? v : "";
                        }
                    }
                }

                function copy_sizeInGb(v: any): number {
                    return typeof v === "number" ? v : 0;
                }

                function copy_isSystemDisk(v: any): boolean {
                    return typeof v === "boolean" ? v : false;
                }

                function copy_iops(v: any): number {
                    return typeof v === "number" ? v : 0;
                }

                function copy_path(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_state(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_attachedTo(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_isAttached(v: any): boolean {
                    return typeof v === "boolean" ? v : false;
                }
            }
        }
    }

    function copy_networking(v: any): {
        monthlyTransfer: { gbPerMonthAllocated: number };
        ports: {
            fromPort: number;
            toPort: number;
            protocol: string;
            accessFrom: string;
            accessType: string;
            commonName: string;
            accessDirection: "inbound" | "outbound";
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[];
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                monthlyTransfer: copy_monthlyTransfer(v.monthlyTransfer),
                ports: copy_ports(v.ports)
            };
            return obj;
        } else {
            return { monthlyTransfer: { gbPerMonthAllocated: 0 }, ports: [] };
        }

        function copy_monthlyTransfer(v: any): { gbPerMonthAllocated: number } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    gbPerMonthAllocated: copy_gbPerMonthAllocated(v.gbPerMonthAllocated)
                };
                return obj;
            } else {
                return { gbPerMonthAllocated: 0 };
            }

            function copy_gbPerMonthAllocated(v: any): number {
                return typeof v === "number" ? v : 0;
            }
        }

        function copy_ports(
            v: any
        ): {
            fromPort: number;
            toPort: number;
            protocol: string;
            accessFrom: string;
            accessType: string;
            commonName: string;
            accessDirection: "inbound" | "outbound";
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[] {
            return Array.isArray(v) ? v.map(copy_item) : [];

            function copy_item(v: any): {
                fromPort: number;
                toPort: number;
                protocol: string;
                accessFrom: string;
                accessType: string;
                commonName: string;
                accessDirection: "inbound" | "outbound";
                cidrs: string[];
                ipv6Cidrs: string[];
                cidrListAliases: string[];
            } {
                if (typeof v === "object" && v !== null) {
                    const obj = {
                        fromPort: copy_fromPort(v.fromPort),
                        toPort: copy_toPort(v.toPort),
                        protocol: copy_protocol(v.protocol),
                        accessFrom: copy_accessFrom(v.accessFrom),
                        accessType: copy_accessType(v.accessType),
                        commonName: copy_commonName(v.commonName),
                        accessDirection: copy_accessDirection(v.accessDirection),
                        cidrs: copy_cidrs(v.cidrs),
                        ipv6Cidrs: copy_ipv6Cidrs(v.ipv6Cidrs),
                        cidrListAliases: copy_cidrListAliases(v.cidrListAliases)
                    };
                    return obj;
                } else {
                    return {
                        fromPort: 0,
                        toPort: 0,
                        protocol: "",
                        accessFrom: "",
                        accessType: "",
                        commonName: "",
                        accessDirection: "inbound",
                        cidrs: [],
                        ipv6Cidrs: [],
                        cidrListAliases: []
                    };
                }

                function copy_fromPort(v: any): number {
                    return typeof v === "number" ? v : 0;
                }

                function copy_toPort(v: any): number {
                    return typeof v === "number" ? v : 0;
                }

                function copy_protocol(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_accessFrom(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_accessType(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_commonName(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_accessDirection(v: any): "inbound" | "outbound" {
                    if (typeof v === "string" && new Set(["inbound", "outbound"]).has(v) === true) {
                        return v as any;
                    } else {
                        return "inbound" as any;
                    }
                }

                function copy_cidrs(v: any): string[] {
                    return Array.isArray(v) ? v.map(copy_item) : [];

                    function copy_item(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }

                function copy_ipv6Cidrs(v: any): string[] {
                    return Array.isArray(v) ? v.map(copy_item) : [];

                    function copy_item(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }

                function copy_cidrListAliases(v: any): string[] {
                    return Array.isArray(v) ? v.map(copy_item) : [];

                    function copy_item(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }
            }
        }
    }

    function copy_state(v: any): { code: number; name: string } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                code: copy_code(v.code),
                name: copy_name(v.name)
            };
            return obj;
        } else {
            return { code: 0, name: "" };
        }

        function copy_code(v: any): number {
            return typeof v === "number" ? v : 0;
        }

        function copy_name(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_username(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_sshKeyName(v: any): string {
        return typeof v === "string" ? v : "";
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
