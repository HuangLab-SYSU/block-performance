// auto generated by dev/system

export function make_input(cb?: (o: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; instanceName: string }) => void): {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
} {
    const item: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; instanceName: string } = {
        credentials: { accessKeyId: "", secretAccessKey: "" },
        instanceName: ""
    };
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_ok(
    cb?: (o: {
        name: string;
        arn: string;
        supportCode: string;
        createdAt: string;
        location: { availabilityZone: string; regionName: string };
        resourceType: string;
        tags: { key: string; value: string }[];
        blueprintId: string;
        blueprintName: string;
        bundleId: string;
        addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
        isStaticIp: boolean;
        privateIpAddress: string;
        publicIpAddress: string;
        ipv6Addresses: string[];
        ipAddressType: string;
        hardware: {
            cpuCount: number;
            ramSizeInGb: number;
            disks: {
                name: string;
                arn: string;
                supportCode: string;
                createdAt: string;
                location: { availabilityZone: string; regionName: string };
                resourceType: string;
                tags: { key: string; value: string }[];
                addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                sizeInGb: number;
                isSystemDisk: boolean;
                iops: number;
                path: string;
                state: string;
                attachedTo: string;
                isAttached: boolean;
            }[];
        };
        networking: {
            monthlyTransfer: { gbPerMonthAllocated: number };
            ports: {
                fromPort: number;
                toPort: number;
                protocol: string;
                accessFrom: string;
                accessType: string;
                commonName: string;
                accessDirection: "inbound" | "outbound";
                cidrs: string[];
                ipv6Cidrs: string[];
                cidrListAliases: string[];
            }[];
        };
        state: { code: number; name: string };
        username: string;
        sshKeyName: string;
    }) => void
): {
    name: string;
    arn: string;
    supportCode: string;
    createdAt: string;
    location: { availabilityZone: string; regionName: string };
    resourceType: string;
    tags: { key: string; value: string }[];
    blueprintId: string;
    blueprintName: string;
    bundleId: string;
    addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
    isStaticIp: boolean;
    privateIpAddress: string;
    publicIpAddress: string;
    ipv6Addresses: string[];
    ipAddressType: string;
    hardware: {
        cpuCount: number;
        ramSizeInGb: number;
        disks: {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            sizeInGb: number;
            isSystemDisk: boolean;
            iops: number;
            path: string;
            state: string;
            attachedTo: string;
            isAttached: boolean;
        }[];
    };
    networking: {
        monthlyTransfer: { gbPerMonthAllocated: number };
        ports: {
            fromPort: number;
            toPort: number;
            protocol: string;
            accessFrom: string;
            accessType: string;
            commonName: string;
            accessDirection: "inbound" | "outbound";
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[];
    };
    state: { code: number; name: string };
    username: string;
    sshKeyName: string;
} {
    const item: {
        name: string;
        arn: string;
        supportCode: string;
        createdAt: string;
        location: { availabilityZone: string; regionName: string };
        resourceType: string;
        tags: { key: string; value: string }[];
        blueprintId: string;
        blueprintName: string;
        bundleId: string;
        addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
        isStaticIp: boolean;
        privateIpAddress: string;
        publicIpAddress: string;
        ipv6Addresses: string[];
        ipAddressType: string;
        hardware: {
            cpuCount: number;
            ramSizeInGb: number;
            disks: {
                name: string;
                arn: string;
                supportCode: string;
                createdAt: string;
                location: { availabilityZone: string; regionName: string };
                resourceType: string;
                tags: { key: string; value: string }[];
                addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                sizeInGb: number;
                isSystemDisk: boolean;
                iops: number;
                path: string;
                state: string;
                attachedTo: string;
                isAttached: boolean;
            }[];
        };
        networking: {
            monthlyTransfer: { gbPerMonthAllocated: number };
            ports: {
                fromPort: number;
                toPort: number;
                protocol: string;
                accessFrom: string;
                accessType: string;
                commonName: string;
                accessDirection: "inbound" | "outbound";
                cidrs: string[];
                ipv6Cidrs: string[];
                cidrListAliases: string[];
            }[];
        };
        state: { code: number; name: string };
        username: string;
        sshKeyName: string;
    } = {
        name: "",
        arn: "",
        supportCode: "",
        createdAt: "",
        location: { availabilityZone: "", regionName: "" },
        resourceType: "",
        tags: [],
        blueprintId: "",
        blueprintName: "",
        bundleId: "",
        addOns: [],
        isStaticIp: false,
        privateIpAddress: "",
        publicIpAddress: "",
        ipv6Addresses: [],
        ipAddressType: "",
        hardware: { cpuCount: 0, ramSizeInGb: 0, disks: [] },
        networking: { monthlyTransfer: { gbPerMonthAllocated: 0 }, ports: [] },
        state: { code: 0, name: "" },
        username: "",
        sshKeyName: ""
    };
    if (cb) {
        cb(item);
    }
    return item;
}
