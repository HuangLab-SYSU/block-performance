// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region: string;
    includeInactive?: boolean;
    pageToken?: string;
}

export interface OutputOk {
    nextPageToken: string;
    bundles: {
        bundleId: string;
        instanceType: string;
        isActive: boolean;
        name: string;
        cpuCount: number;
        diskSizeInGb: number;
        power: number;
        price: number;
        ramSizeInGb: number;
        transferPerMonthInGb: number;
        supportedPlatforms: string[];
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "includeInactive") return;
            if (field === "pageToken") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        log.println("v.region must be string");
        if (typeof v.region !== "string") {
            throw new Error("v.region is not string");
        }

        if (v.includeInactive !== undefined) {
            log.println("v.includeInactive must be boolean");
            if (typeof v.includeInactive !== "boolean") {
                throw new Error("v.includeInactive is not boolean");
            }
        }

        if (v.pageToken !== undefined) {
            log.println("v.pageToken must be string");
            if (typeof v.pageToken !== "string") {
                throw new Error("v.pageToken is not string");
            }
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            nextPageToken: copy_nextPageToken(v.nextPageToken),
            bundles: copy_bundles(v.bundles)
        };
        return obj;
    } else {
        return { nextPageToken: "", bundles: [] };
    }

    function copy_nextPageToken(v: any): string {
        return typeof v === "string" ? v : "";
    }

    function copy_bundles(
        v: any
    ): {
        bundleId: string;
        instanceType: string;
        isActive: boolean;
        name: string;
        cpuCount: number;
        diskSizeInGb: number;
        power: number;
        price: number;
        ramSizeInGb: number;
        transferPerMonthInGb: number;
        supportedPlatforms: string[];
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            bundleId: string;
            instanceType: string;
            isActive: boolean;
            name: string;
            cpuCount: number;
            diskSizeInGb: number;
            power: number;
            price: number;
            ramSizeInGb: number;
            transferPerMonthInGb: number;
            supportedPlatforms: string[];
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    bundleId: copy_bundleId(v.bundleId),
                    instanceType: copy_instanceType(v.instanceType),
                    isActive: copy_isActive(v.isActive),
                    name: copy_name(v.name),
                    cpuCount: copy_cpuCount(v.cpuCount),
                    diskSizeInGb: copy_diskSizeInGb(v.diskSizeInGb),
                    power: copy_power(v.power),
                    price: copy_price(v.price),
                    ramSizeInGb: copy_ramSizeInGb(v.ramSizeInGb),
                    transferPerMonthInGb: copy_transferPerMonthInGb(v.transferPerMonthInGb),
                    supportedPlatforms: copy_supportedPlatforms(v.supportedPlatforms)
                };
                return obj;
            } else {
                return {
                    bundleId: "",
                    instanceType: "",
                    isActive: false,
                    name: "",
                    cpuCount: 0,
                    diskSizeInGb: 0,
                    power: 0,
                    price: 0,
                    ramSizeInGb: 0,
                    transferPerMonthInGb: 0,
                    supportedPlatforms: []
                };
            }

            function copy_bundleId(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_instanceType(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_isActive(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }

            function copy_name(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_cpuCount(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_diskSizeInGb(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_power(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_price(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_ramSizeInGb(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_transferPerMonthInGb(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_supportedPlatforms(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
