// auto generated by dev/system

export function make_input(cb?: (o: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; pageToken?: string }) => void): {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    pageToken?: string;
} {
    const item: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; pageToken?: string } = {
        credentials: { accessKeyId: "", secretAccessKey: "" }
    };
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_ok(
    cb?: (o: {
        nextPageToken: string;
        instances: {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            blueprintId: string;
            blueprintName: string;
            bundleId: string;
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            isStaticIp: boolean;
            privateIpAddress: string;
            publicIpAddress: string;
            ipv6Addresses: string[];
            ipAddressType: string;
            hardware: {
                cpuCount: number;
                ramSizeInGb: number;
                disks: {
                    name: string;
                    arn: string;
                    supportCode: string;
                    createdAt: string;
                    location: { availabilityZone: string; regionName: string };
                    resourceType: string;
                    tags: { key: string; value: string }[];
                    addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                    sizeInGb: number;
                    isSystemDisk: boolean;
                    iops: number;
                    path: string;
                    state: string;
                    attachedTo: string;
                    isAttached: boolean;
                }[];
            };
            networking: {
                monthlyTransfer: { gbPerMonthAllocated: number };
                ports: {
                    fromPort: number;
                    toPort: number;
                    protocol: string;
                    accessFrom: string;
                    accessType: string;
                    commonName: string;
                    accessDirection: "inbound" | "outbound";
                    cidrs: string[];
                    ipv6Cidrs: string[];
                    cidrListAliases: string[];
                }[];
            };
            state: { code: number; name: string };
            username: string;
            sshKeyName: string;
        }[];
    }) => void
): {
    nextPageToken: string;
    instances: {
        name: string;
        arn: string;
        supportCode: string;
        createdAt: string;
        location: { availabilityZone: string; regionName: string };
        resourceType: string;
        tags: { key: string; value: string }[];
        blueprintId: string;
        blueprintName: string;
        bundleId: string;
        addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
        isStaticIp: boolean;
        privateIpAddress: string;
        publicIpAddress: string;
        ipv6Addresses: string[];
        ipAddressType: string;
        hardware: {
            cpuCount: number;
            ramSizeInGb: number;
            disks: {
                name: string;
                arn: string;
                supportCode: string;
                createdAt: string;
                location: { availabilityZone: string; regionName: string };
                resourceType: string;
                tags: { key: string; value: string }[];
                addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                sizeInGb: number;
                isSystemDisk: boolean;
                iops: number;
                path: string;
                state: string;
                attachedTo: string;
                isAttached: boolean;
            }[];
        };
        networking: {
            monthlyTransfer: { gbPerMonthAllocated: number };
            ports: {
                fromPort: number;
                toPort: number;
                protocol: string;
                accessFrom: string;
                accessType: string;
                commonName: string;
                accessDirection: "inbound" | "outbound";
                cidrs: string[];
                ipv6Cidrs: string[];
                cidrListAliases: string[];
            }[];
        };
        state: { code: number; name: string };
        username: string;
        sshKeyName: string;
    }[];
} {
    const item: {
        nextPageToken: string;
        instances: {
            name: string;
            arn: string;
            supportCode: string;
            createdAt: string;
            location: { availabilityZone: string; regionName: string };
            resourceType: string;
            tags: { key: string; value: string }[];
            blueprintId: string;
            blueprintName: string;
            bundleId: string;
            addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
            isStaticIp: boolean;
            privateIpAddress: string;
            publicIpAddress: string;
            ipv6Addresses: string[];
            ipAddressType: string;
            hardware: {
                cpuCount: number;
                ramSizeInGb: number;
                disks: {
                    name: string;
                    arn: string;
                    supportCode: string;
                    createdAt: string;
                    location: { availabilityZone: string; regionName: string };
                    resourceType: string;
                    tags: { key: string; value: string }[];
                    addOns: { name: string; status: string; snapshotTimeOfDay: string; nextSnapshotTimeOfDay: string }[];
                    sizeInGb: number;
                    isSystemDisk: boolean;
                    iops: number;
                    path: string;
                    state: string;
                    attachedTo: string;
                    isAttached: boolean;
                }[];
            };
            networking: {
                monthlyTransfer: { gbPerMonthAllocated: number };
                ports: {
                    fromPort: number;
                    toPort: number;
                    protocol: string;
                    accessFrom: string;
                    accessType: string;
                    commonName: string;
                    accessDirection: "inbound" | "outbound";
                    cidrs: string[];
                    ipv6Cidrs: string[];
                    cidrListAliases: string[];
                }[];
            };
            state: { code: number; name: string };
            username: string;
            sshKeyName: string;
        }[];
    } = { nextPageToken: "", instances: [] };
    if (cb) {
        cb(item);
    }
    return item;
}
