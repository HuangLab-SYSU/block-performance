// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
    force?: boolean;
}

export interface OutputOk {
    operations: {
        createdAt: string;
        id: string;
        isTerminal: boolean;
        location: { availabilityZone: string; regionName: string };
        operationType: string;
        resourceName: string;
        resourceType: string;
        status: string;
        statusChangedAt: string;
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "instanceName") return;
            if (field === "force") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        log.println("v.instanceName must be string");
        if (typeof v.instanceName !== "string") {
            throw new Error("v.instanceName is not string");
        }

        if (v.force !== undefined) {
            log.println("v.force must be boolean");
            if (typeof v.force !== "boolean") {
                throw new Error("v.force is not boolean");
            }
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            operations: copy_operations(v.operations)
        };
        return obj;
    } else {
        return { operations: [] };
    }

    function copy_operations(
        v: any
    ): {
        createdAt: string;
        id: string;
        isTerminal: boolean;
        location: { availabilityZone: string; regionName: string };
        operationType: string;
        resourceName: string;
        resourceType: string;
        status: string;
        statusChangedAt: string;
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            createdAt: string;
            id: string;
            isTerminal: boolean;
            location: { availabilityZone: string; regionName: string };
            operationType: string;
            resourceName: string;
            resourceType: string;
            status: string;
            statusChangedAt: string;
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    createdAt: copy_createdAt(v.createdAt),
                    id: copy_id(v.id),
                    isTerminal: copy_isTerminal(v.isTerminal),
                    location: copy_location(v.location),
                    operationType: copy_operationType(v.operationType),
                    resourceName: copy_resourceName(v.resourceName),
                    resourceType: copy_resourceType(v.resourceType),
                    status: copy_status(v.status),
                    statusChangedAt: copy_statusChangedAt(v.statusChangedAt)
                };
                return obj;
            } else {
                return {
                    createdAt: "",
                    id: "",
                    isTerminal: false,
                    location: { availabilityZone: "", regionName: "" },
                    operationType: "",
                    resourceName: "",
                    resourceType: "",
                    status: "",
                    statusChangedAt: ""
                };
            }

            function copy_createdAt(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_id(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_isTerminal(v: any): boolean {
                return typeof v === "boolean" ? v : false;
            }

            function copy_location(v: any): { availabilityZone: string; regionName: string } {
                if (typeof v === "object" && v !== null) {
                    const obj = {
                        availabilityZone: copy_availabilityZone(v.availabilityZone),
                        regionName: copy_regionName(v.regionName)
                    };
                    return obj;
                } else {
                    return { availabilityZone: "", regionName: "" };
                }

                function copy_availabilityZone(v: any): string {
                    return typeof v === "string" ? v : "";
                }

                function copy_regionName(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_operationType(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_resourceName(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_resourceType(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_status(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_statusChangedAt(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
