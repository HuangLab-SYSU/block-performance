// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    includeAvailabilityZones?: boolean;
    includeRelationalDatabaseAvailabilityZones?: boolean;
}

export interface OutputOk {
    regions: {
        name: string;
        displayName: string;
        description: string;
        continentCode: string;
        availabilityZones: { state: string; zoneName: string }[];
        relationalDatabaseAvailabilityZones: { state: string; zoneName: string }[];
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "includeAvailabilityZones") return;
            if (field === "includeRelationalDatabaseAvailabilityZones") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        if (v.includeAvailabilityZones !== undefined) {
            log.println("v.includeAvailabilityZones must be boolean");
            if (typeof v.includeAvailabilityZones !== "boolean") {
                throw new Error("v.includeAvailabilityZones is not boolean");
            }
        }

        if (v.includeRelationalDatabaseAvailabilityZones !== undefined) {
            log.println("v.includeRelationalDatabaseAvailabilityZones must be boolean");
            if (typeof v.includeRelationalDatabaseAvailabilityZones !== "boolean") {
                throw new Error("v.includeRelationalDatabaseAvailabilityZones is not boolean");
            }
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            regions: copy_regions(v.regions)
        };
        return obj;
    } else {
        return { regions: [] };
    }

    function copy_regions(
        v: any
    ): {
        name: string;
        displayName: string;
        description: string;
        continentCode: string;
        availabilityZones: { state: string; zoneName: string }[];
        relationalDatabaseAvailabilityZones: { state: string; zoneName: string }[];
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            name: string;
            displayName: string;
            description: string;
            continentCode: string;
            availabilityZones: { state: string; zoneName: string }[];
            relationalDatabaseAvailabilityZones: { state: string; zoneName: string }[];
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    name: copy_name(v.name),
                    displayName: copy_displayName(v.displayName),
                    description: copy_description(v.description),
                    continentCode: copy_continentCode(v.continentCode),
                    availabilityZones: copy_availabilityZones(v.availabilityZones),
                    relationalDatabaseAvailabilityZones: copy_relationalDatabaseAvailabilityZones(v.relationalDatabaseAvailabilityZones)
                };
                return obj;
            } else {
                return { name: "", displayName: "", description: "", continentCode: "", availabilityZones: [], relationalDatabaseAvailabilityZones: [] };
            }

            function copy_name(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_displayName(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_description(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_continentCode(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_availabilityZones(v: any): { state: string; zoneName: string }[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): { state: string; zoneName: string } {
                    if (typeof v === "object" && v !== null) {
                        const obj = {
                            state: copy_state(v.state),
                            zoneName: copy_zoneName(v.zoneName)
                        };
                        return obj;
                    } else {
                        return { state: "", zoneName: "" };
                    }

                    function copy_state(v: any): string {
                        return typeof v === "string" ? v : "";
                    }

                    function copy_zoneName(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }
            }

            function copy_relationalDatabaseAvailabilityZones(v: any): { state: string; zoneName: string }[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): { state: string; zoneName: string } {
                    if (typeof v === "object" && v !== null) {
                        const obj = {
                            state: copy_state(v.state),
                            zoneName: copy_zoneName(v.zoneName)
                        };
                        return obj;
                    } else {
                        return { state: "", zoneName: "" };
                    }

                    function copy_state(v: any): string {
                        return typeof v === "string" ? v : "";
                    }

                    function copy_zoneName(v: any): string {
                        return typeof v === "string" ? v : "";
                    }
                }
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
