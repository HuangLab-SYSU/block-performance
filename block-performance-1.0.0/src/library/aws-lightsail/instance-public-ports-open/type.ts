// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
    portInfo: { protocol: "all" | "tcp" | "udp" | "icmp"; fromPort: number; toPort: number; cidrs: string[]; ipv6Cidrs: string[]; cidrListAliases: string[] };
}

export interface OutputOk {
    operation: {
        createdAt: string;
        id: string;
        isTerminal: boolean;
        location: { availabilityZone: string; regionName: string };
        operationType: string;
        resourceName: string;
        resourceType: string;
        status: string;
        statusChangedAt: string;
    };
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "instanceName") return;
            if (field === "portInfo") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        log.println("v.instanceName must be string");
        if (typeof v.instanceName !== "string") {
            throw new Error("v.instanceName is not string");
        }

        log.println("v.portInfo must be object");
        if (typeof v.portInfo !== "object" || v.portInfo === null) {
            throw new Error("v.portInfo is not object");
        }

        Object.keys(v.portInfo).forEach((field) => {
            if (field === "protocol") return;
            if (field === "fromPort") return;
            if (field === "toPort") return;
            if (field === "cidrs") return;
            if (field === "ipv6Cidrs") return;
            if (field === "cidrListAliases") return;
            throw new Error("v.portInfo contains unknown field: " + field);
        });

        log.println("v.portInfo.protocol must be string");
        if (typeof v.portInfo.protocol !== "string") {
            throw new Error("v.portInfo.protocol is not string");
        }

        if (new Set(["all", "tcp", "udp", "icmp"]).has(v.portInfo.protocol) === false) {
            throw new Error("v.portInfo.protocol is not a valid string enum value");
        }

        log.println("v.portInfo.fromPort must be number");
        if (typeof v.portInfo.fromPort !== "number") {
            throw new Error("v.portInfo.fromPort is not number");
        }

        if (Number.isFinite(v.portInfo.fromPort) === false) {
            throw new Error("v.portInfo.fromPort is not finite number");
        }

        log.println("v.portInfo.toPort must be number");
        if (typeof v.portInfo.toPort !== "number") {
            throw new Error("v.portInfo.toPort is not number");
        }

        if (Number.isFinite(v.portInfo.toPort) === false) {
            throw new Error("v.portInfo.toPort is not finite number");
        }

        log.println("v.portInfo.cidrs must be array");
        if (!Array.isArray(v.portInfo.cidrs)) {
            throw new Error("v.portInfo.cidrs is not array");
        }

        v.portInfo.cidrs.forEach((item: any, i: number) => {
            log.println("check v.portInfo.cidrs[i]");

            log.println("item must be string");
            if (typeof item !== "string") {
                throw new Error("item is not string");
            }
        });

        log.println("v.portInfo.ipv6Cidrs must be array");
        if (!Array.isArray(v.portInfo.ipv6Cidrs)) {
            throw new Error("v.portInfo.ipv6Cidrs is not array");
        }

        v.portInfo.ipv6Cidrs.forEach((item: any, i: number) => {
            log.println("check v.portInfo.ipv6Cidrs[i]");

            log.println("item must be string");
            if (typeof item !== "string") {
                throw new Error("item is not string");
            }
        });

        log.println("v.portInfo.cidrListAliases must be array");
        if (!Array.isArray(v.portInfo.cidrListAliases)) {
            throw new Error("v.portInfo.cidrListAliases is not array");
        }

        v.portInfo.cidrListAliases.forEach((item: any, i: number) => {
            log.println("check v.portInfo.cidrListAliases[i]");

            log.println("item must be string");
            if (typeof item !== "string") {
                throw new Error("item is not string");
            }
        });
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            operation: copy_operation(v.operation)
        };
        return obj;
    } else {
        return {
            operation: {
                createdAt: "",
                id: "",
                isTerminal: false,
                location: { availabilityZone: "", regionName: "" },
                operationType: "",
                resourceName: "",
                resourceType: "",
                status: "",
                statusChangedAt: ""
            }
        };
    }

    function copy_operation(v: any): {
        createdAt: string;
        id: string;
        isTerminal: boolean;
        location: { availabilityZone: string; regionName: string };
        operationType: string;
        resourceName: string;
        resourceType: string;
        status: string;
        statusChangedAt: string;
    } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                createdAt: copy_createdAt(v.createdAt),
                id: copy_id(v.id),
                isTerminal: copy_isTerminal(v.isTerminal),
                location: copy_location(v.location),
                operationType: copy_operationType(v.operationType),
                resourceName: copy_resourceName(v.resourceName),
                resourceType: copy_resourceType(v.resourceType),
                status: copy_status(v.status),
                statusChangedAt: copy_statusChangedAt(v.statusChangedAt)
            };
            return obj;
        } else {
            return {
                createdAt: "",
                id: "",
                isTerminal: false,
                location: { availabilityZone: "", regionName: "" },
                operationType: "",
                resourceName: "",
                resourceType: "",
                status: "",
                statusChangedAt: ""
            };
        }

        function copy_createdAt(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_id(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_isTerminal(v: any): boolean {
            return typeof v === "boolean" ? v : false;
        }

        function copy_location(v: any): { availabilityZone: string; regionName: string } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    availabilityZone: copy_availabilityZone(v.availabilityZone),
                    regionName: copy_regionName(v.regionName)
                };
                return obj;
            } else {
                return { availabilityZone: "", regionName: "" };
            }

            function copy_availabilityZone(v: any): string {
                return typeof v === "string" ? v : "";
            }

            function copy_regionName(v: any): string {
                return typeof v === "string" ? v : "";
            }
        }

        function copy_operationType(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_resourceName(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_resourceType(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_status(v: any): string {
            return typeof v === "string" ? v : "";
        }

        function copy_statusChangedAt(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
