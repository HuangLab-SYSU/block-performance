// auto generated by dev/system

export function make_input(
    cb?: (o: {
        credentials: { accessKeyId: string; secretAccessKey: string };
        region?: string;
        instanceName: string;
        portInfos: {
            protocol: "all" | "tcp" | "udp" | "icmp";
            fromPort: number;
            toPort: number;
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[];
    }) => void
): {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
    portInfos: {
        protocol: "all" | "tcp" | "udp" | "icmp";
        fromPort: number;
        toPort: number;
        cidrs: string[];
        ipv6Cidrs: string[];
        cidrListAliases: string[];
    }[];
} {
    const item: {
        credentials: { accessKeyId: string; secretAccessKey: string };
        region?: string;
        instanceName: string;
        portInfos: {
            protocol: "all" | "tcp" | "udp" | "icmp";
            fromPort: number;
            toPort: number;
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
        }[];
    } = { credentials: { accessKeyId: "", secretAccessKey: "" }, instanceName: "", portInfos: [] };
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_ok(
    cb?: (o: {
        operation: {
            createdAt: string;
            id: string;
            isTerminal: boolean;
            location: { availabilityZone: string; regionName: string };
            operationType: string;
            resourceName: string;
            resourceType: string;
            status: string;
            statusChangedAt: string;
        };
    }) => void
): {
    operation: {
        createdAt: string;
        id: string;
        isTerminal: boolean;
        location: { availabilityZone: string; regionName: string };
        operationType: string;
        resourceName: string;
        resourceType: string;
        status: string;
        statusChangedAt: string;
    };
} {
    const item: {
        operation: {
            createdAt: string;
            id: string;
            isTerminal: boolean;
            location: { availabilityZone: string; regionName: string };
            operationType: string;
            resourceName: string;
            resourceType: string;
            status: string;
            statusChangedAt: string;
        };
    } = {
        operation: {
            createdAt: "",
            id: "",
            isTerminal: false,
            location: { availabilityZone: "", regionName: "" },
            operationType: "",
            resourceName: "",
            resourceType: "",
            status: "",
            statusChangedAt: ""
        }
    };
    if (cb) {
        cb(item);
    }
    return item;
}
