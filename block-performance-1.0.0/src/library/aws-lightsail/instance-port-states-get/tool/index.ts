// auto generated by dev/system

export function make_input(cb?: (o: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; instanceName: string }) => void): {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
} {
    const item: { credentials: { accessKeyId: string; secretAccessKey: string }; region?: string; instanceName: string } = {
        credentials: { accessKeyId: "", secretAccessKey: "" },
        instanceName: ""
    };
    if (cb) {
        cb(item);
    }
    return item;
}

export function make_output_ok(
    cb?: (o: {
        portStates: {
            protocol: "all" | "tcp" | "udp" | "icmp";
            fromPort: number;
            toPort: number;
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
            state: "open" | "closed";
        }[];
    }) => void
): {
    portStates: {
        protocol: "all" | "tcp" | "udp" | "icmp";
        fromPort: number;
        toPort: number;
        cidrs: string[];
        ipv6Cidrs: string[];
        cidrListAliases: string[];
        state: "open" | "closed";
    }[];
} {
    const item: {
        portStates: {
            protocol: "all" | "tcp" | "udp" | "icmp";
            fromPort: number;
            toPort: number;
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
            state: "open" | "closed";
        }[];
    } = { portStates: [] };
    if (cb) {
        cb(item);
    }
    return item;
}
