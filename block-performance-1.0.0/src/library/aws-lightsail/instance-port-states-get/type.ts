// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    credentials: { accessKeyId: string; secretAccessKey: string };
    region?: string;
    instanceName: string;
}

export interface OutputOk {
    portStates: {
        protocol: "all" | "tcp" | "udp" | "icmp";
        fromPort: number;
        toPort: number;
        cidrs: string[];
        ipv6Cidrs: string[];
        cidrListAliases: string[];
        state: "open" | "closed";
    }[];
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "credentials") return;
            if (field === "region") return;
            if (field === "instanceName") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.credentials must be object");
        if (typeof v.credentials !== "object" || v.credentials === null) {
            throw new Error("v.credentials is not object");
        }

        Object.keys(v.credentials).forEach((field) => {
            if (field === "accessKeyId") return;
            if (field === "secretAccessKey") return;
            throw new Error("v.credentials contains unknown field: " + field);
        });

        log.println("v.credentials.accessKeyId must be string");
        if (typeof v.credentials.accessKeyId !== "string") {
            throw new Error("v.credentials.accessKeyId is not string");
        }

        log.println("v.credentials.secretAccessKey must be string");
        if (typeof v.credentials.secretAccessKey !== "string") {
            throw new Error("v.credentials.secretAccessKey is not string");
        }

        if (v.region !== undefined) {
            log.println("v.region must be string");
            if (typeof v.region !== "string") {
                throw new Error("v.region is not string");
            }
        }

        log.println("v.instanceName must be string");
        if (typeof v.instanceName !== "string") {
            throw new Error("v.instanceName is not string");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            portStates: copy_portStates(v.portStates)
        };
        return obj;
    } else {
        return { portStates: [] };
    }

    function copy_portStates(
        v: any
    ): {
        protocol: "all" | "tcp" | "udp" | "icmp";
        fromPort: number;
        toPort: number;
        cidrs: string[];
        ipv6Cidrs: string[];
        cidrListAliases: string[];
        state: "open" | "closed";
    }[] {
        return Array.isArray(v) ? v.map(copy_item) : [];

        function copy_item(v: any): {
            protocol: "all" | "tcp" | "udp" | "icmp";
            fromPort: number;
            toPort: number;
            cidrs: string[];
            ipv6Cidrs: string[];
            cidrListAliases: string[];
            state: "open" | "closed";
        } {
            if (typeof v === "object" && v !== null) {
                const obj = {
                    protocol: copy_protocol(v.protocol),
                    fromPort: copy_fromPort(v.fromPort),
                    toPort: copy_toPort(v.toPort),
                    cidrs: copy_cidrs(v.cidrs),
                    ipv6Cidrs: copy_ipv6Cidrs(v.ipv6Cidrs),
                    cidrListAliases: copy_cidrListAliases(v.cidrListAliases),
                    state: copy_state(v.state)
                };
                return obj;
            } else {
                return { protocol: "all", fromPort: 0, toPort: 0, cidrs: [], ipv6Cidrs: [], cidrListAliases: [], state: "open" };
            }

            function copy_protocol(v: any): "all" | "tcp" | "udp" | "icmp" {
                if (typeof v === "string" && new Set(["all", "tcp", "udp", "icmp"]).has(v) === true) {
                    return v as any;
                } else {
                    return "all" as any;
                }
            }

            function copy_fromPort(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_toPort(v: any): number {
                return typeof v === "number" ? v : 0;
            }

            function copy_cidrs(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_ipv6Cidrs(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_cidrListAliases(v: any): string[] {
                return Array.isArray(v) ? v.map(copy_item) : [];

                function copy_item(v: any): string {
                    return typeof v === "string" ? v : "";
                }
            }

            function copy_state(v: any): "open" | "closed" {
                if (typeof v === "string" && new Set(["open", "closed"]).has(v) === true) {
                    return v as any;
                } else {
                    return "open" as any;
                }
            }
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
