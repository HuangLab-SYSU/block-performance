// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_regions_get } from "../regions-get/rpc/handle.js";
import { handle_rpc_bundles_get } from "../bundles-get/rpc/handle.js";
import { handle_rpc_blueprints_get } from "../blueprints-get/rpc/handle.js";
import { handle_rpc_instances_create } from "../instances-create/rpc/handle.js";
import { handle_rpc_instance_get } from "../instance-get/rpc/handle.js";
import { handle_rpc_instance_state_get } from "../instance-state-get/rpc/handle.js";
import { handle_rpc_instances_get } from "../instances-get/rpc/handle.js";
import { handle_rpc_instance_delete } from "../instance-delete/rpc/handle.js";
import { handle_rpc_instance_start } from "../instance-start/rpc/handle.js";
import { handle_rpc_instance_stop } from "../instance-stop/rpc/handle.js";
import { handle_rpc_instance_reboot } from "../instance-reboot/rpc/handle.js";
import { handle_rpc_instance_port_states_get } from "../instance-port-states-get/rpc/handle.js";
import { handle_rpc_instance_public_ports_open } from "../instance-public-ports-open/rpc/handle.js";
import { handle_rpc_instance_public_ports_close } from "../instance-public-ports-close/rpc/handle.js";
import { handle_rpc_instance_public_ports_put } from "../instance-public-ports-put/rpc/handle.js";
import { handle_rpc_keypair_import } from "../keypair-import/rpc/handle.js";
import { handle_rpc_keypair_default_download } from "../keypair-default-download/rpc/handle.js";
import { handle_rpc_keypair_get } from "../keypair-get/rpc/handle.js";
import { handle_rpc_keypairs_get } from "../keypairs-get/rpc/handle.js";
import { handle_rpc_keypair_create } from "../keypair-create/rpc/handle.js";
import { handle_rpc_keypair_delete } from "../keypair-delete/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { router: express.Router }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { router } = opt;

    router.post("/library/aws-lightsail/regions-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.regions-get");
        handle_rpc_regions_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/bundles-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.bundles-get");
        handle_rpc_bundles_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/blueprints-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.blueprints-get");
        handle_rpc_blueprints_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instances-create", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instances-create");
        handle_rpc_instances_create(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-get");
        handle_rpc_instance_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-state-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-state-get");
        handle_rpc_instance_state_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instances-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instances-get");
        handle_rpc_instances_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-delete", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-delete");
        handle_rpc_instance_delete(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-start", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-start");
        handle_rpc_instance_start(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-stop", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-stop");
        handle_rpc_instance_stop(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-reboot", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-reboot");
        handle_rpc_instance_reboot(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-port-states-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-port-states-get");
        handle_rpc_instance_port_states_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-public-ports-open", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-public-ports-open");
        handle_rpc_instance_public_ports_open(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-public-ports-close", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-public-ports-close");
        handle_rpc_instance_public_ports_close(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/instance-public-ports-put", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.instance-public-ports-put");
        handle_rpc_instance_public_ports_put(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypair-import", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypair-import");
        handle_rpc_keypair_import(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypair-default-download", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypair-default-download");
        handle_rpc_keypair_default_download(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypair-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypair-get");
        handle_rpc_keypair_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypairs-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypairs-get");
        handle_rpc_keypairs_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypair-create", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypair-create");
        handle_rpc_keypair_create(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    router.post("/library/aws-lightsail/keypair-delete", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.aws-lightsail.keypair-delete");
        handle_rpc_keypair_delete(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
