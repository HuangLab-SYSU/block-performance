// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_import_list } from "../import-list/rpc/handle.js";
import { handle_rpc_library_reference_list } from "../library-reference-list/rpc/handle.js";
import { handle_rpc_parse } from "../parse/rpc/handle.js";
import { handle_rpc_print_import } from "../print-import/rpc/handle.js";
import { handle_rpc_tsconfig_parse } from "../tsconfig-parse/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/typescript/import-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.typescript.import-list");
        handle_rpc_import_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/typescript/library-reference-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.typescript.library-reference-list");
        handle_rpc_library_reference_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/typescript/parse", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.typescript.parse");
        handle_rpc_parse(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/typescript/print-import", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.typescript.print-import");
        handle_rpc_print_import(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/typescript/tsconfig-parse", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.typescript.tsconfig-parse");
        handle_rpc_tsconfig_parse(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
